// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cielimMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cielimMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cielimMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cielimMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cielimMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace cielimMessage {
class CameraModel;
struct CameraModelDefaultTypeInternal;
extern CameraModelDefaultTypeInternal _CameraModel_default_instance_;
class CelestialBody;
struct CelestialBodyDefaultTypeInternal;
extern CelestialBodyDefaultTypeInternal _CelestialBody_default_instance_;
class CelestialModel;
struct CelestialModelDefaultTypeInternal;
extern CelestialModelDefaultTypeInternal _CelestialModel_default_instance_;
class CielimMessage;
struct CielimMessageDefaultTypeInternal;
extern CielimMessageDefaultTypeInternal _CielimMessage_default_instance_;
class EpochDateTime;
struct EpochDateTimeDefaultTypeInternal;
extern EpochDateTimeDefaultTypeInternal _EpochDateTime_default_instance_;
class RenderingModel;
struct RenderingModelDefaultTypeInternal;
extern RenderingModelDefaultTypeInternal _RenderingModel_default_instance_;
class Spacecraft;
struct SpacecraftDefaultTypeInternal;
extern SpacecraftDefaultTypeInternal _Spacecraft_default_instance_;
class TimeStamp;
struct TimeStampDefaultTypeInternal;
extern TimeStampDefaultTypeInternal _TimeStamp_default_instance_;
}  // namespace cielimMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::cielimMessage::CameraModel* Arena::CreateMaybeMessage<::cielimMessage::CameraModel>(Arena*);
template<> ::cielimMessage::CelestialBody* Arena::CreateMaybeMessage<::cielimMessage::CelestialBody>(Arena*);
template<> ::cielimMessage::CelestialModel* Arena::CreateMaybeMessage<::cielimMessage::CelestialModel>(Arena*);
template<> ::cielimMessage::CielimMessage* Arena::CreateMaybeMessage<::cielimMessage::CielimMessage>(Arena*);
template<> ::cielimMessage::EpochDateTime* Arena::CreateMaybeMessage<::cielimMessage::EpochDateTime>(Arena*);
template<> ::cielimMessage::RenderingModel* Arena::CreateMaybeMessage<::cielimMessage::RenderingModel>(Arena*);
template<> ::cielimMessage::Spacecraft* Arena::CreateMaybeMessage<::cielimMessage::Spacecraft>(Arena*);
template<> ::cielimMessage::TimeStamp* Arena::CreateMaybeMessage<::cielimMessage::TimeStamp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cielimMessage {

// ===================================================================

class TimeStamp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cielimMessage.TimeStamp) */ {
 public:
  inline TimeStamp() : TimeStamp(nullptr) {}
  ~TimeStamp() override;
  explicit constexpr TimeStamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeStamp(const TimeStamp& from);
  TimeStamp(TimeStamp&& from) noexcept
    : TimeStamp() {
    *this = ::std::move(from);
  }

  inline TimeStamp& operator=(const TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeStamp& operator=(TimeStamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TimeStamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeStamp* internal_default_instance() {
    return reinterpret_cast<const TimeStamp*>(
               &_TimeStamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TimeStamp& a, TimeStamp& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeStamp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeStamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeStamp* New() const final {
    return new TimeStamp();
  }

  TimeStamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeStamp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TimeStamp& from);
  void MergeFrom(const TimeStamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimeStamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cielimMessage.TimeStamp";
  }
  protected:
  explicit TimeStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameNumberFieldNumber = 1,
    kSimTimeElapsedFieldNumber = 2,
  };
  // int64 frameNumber = 1;
  void clear_framenumber();
  ::PROTOBUF_NAMESPACE_ID::int64 framenumber() const;
  void set_framenumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_framenumber() const;
  void _internal_set_framenumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double simTimeElapsed = 2;
  void clear_simtimeelapsed();
  double simtimeelapsed() const;
  void set_simtimeelapsed(double value);
  private:
  double _internal_simtimeelapsed() const;
  void _internal_set_simtimeelapsed(double value);
  public:

  // @@protoc_insertion_point(class_scope:cielimMessage.TimeStamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 framenumber_;
  double simtimeelapsed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cielimMessage_2eproto;
};
// -------------------------------------------------------------------

class EpochDateTime final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cielimMessage.EpochDateTime) */ {
 public:
  inline EpochDateTime() : EpochDateTime(nullptr) {}
  ~EpochDateTime() override;
  explicit constexpr EpochDateTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EpochDateTime(const EpochDateTime& from);
  EpochDateTime(EpochDateTime&& from) noexcept
    : EpochDateTime() {
    *this = ::std::move(from);
  }

  inline EpochDateTime& operator=(const EpochDateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpochDateTime& operator=(EpochDateTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EpochDateTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const EpochDateTime* internal_default_instance() {
    return reinterpret_cast<const EpochDateTime*>(
               &_EpochDateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EpochDateTime& a, EpochDateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(EpochDateTime* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpochDateTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EpochDateTime* New() const final {
    return new EpochDateTime();
  }

  EpochDateTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EpochDateTime>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EpochDateTime& from);
  void MergeFrom(const EpochDateTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EpochDateTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cielimMessage.EpochDateTime";
  }
  protected:
  explicit EpochDateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
    kHoursFieldNumber = 4,
    kSecondsFieldNumber = 6,
    kMinutesFieldNumber = 5,
  };
  // int32 year = 1;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 month = 2;
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 day = 3;
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::int32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hours = 4;
  void clear_hours();
  ::PROTOBUF_NAMESPACE_ID::int32 hours() const;
  void set_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hours() const;
  void _internal_set_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double seconds = 6;
  void clear_seconds();
  double seconds() const;
  void set_seconds(double value);
  private:
  double _internal_seconds() const;
  void _internal_set_seconds(double value);
  public:

  // int32 minutes = 5;
  void clear_minutes();
  ::PROTOBUF_NAMESPACE_ID::int32 minutes() const;
  void set_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minutes() const;
  void _internal_set_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cielimMessage.EpochDateTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_;
  ::PROTOBUF_NAMESPACE_ID::int32 hours_;
  double seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 minutes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cielimMessage_2eproto;
};
// -------------------------------------------------------------------

class CelestialModel final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cielimMessage.CelestialModel) */ {
 public:
  inline CelestialModel() : CelestialModel(nullptr) {}
  ~CelestialModel() override;
  explicit constexpr CelestialModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CelestialModel(const CelestialModel& from);
  CelestialModel(CelestialModel&& from) noexcept
    : CelestialModel() {
    *this = ::std::move(from);
  }

  inline CelestialModel& operator=(const CelestialModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CelestialModel& operator=(CelestialModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CelestialModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CelestialModel* internal_default_instance() {
    return reinterpret_cast<const CelestialModel*>(
               &_CelestialModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CelestialModel& a, CelestialModel& b) {
    a.Swap(&b);
  }
  inline void Swap(CelestialModel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CelestialModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CelestialModel* New() const final {
    return new CelestialModel();
  }

  CelestialModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CelestialModel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CelestialModel& from);
  void MergeFrom(const CelestialModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CelestialModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cielimMessage.CelestialModel";
  }
  protected:
  explicit CelestialModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReflectanceParametersFieldNumber = 5,
    kPrincipalAxisDistortionFieldNumber = 7,
    kShapeModelFieldNumber = 1,
    kBrdfModelFieldNumber = 4,
    kPerlinNoiseStdDeviationFieldNumber = 2,
    kProceduralRocksFieldNumber = 3,
    kMeanRadiusFieldNumber = 6,
  };
  // repeated double reflectanceParameters = 5;
  int reflectanceparameters_size() const;
  private:
  int _internal_reflectanceparameters_size() const;
  public:
  void clear_reflectanceparameters();
  private:
  double _internal_reflectanceparameters(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_reflectanceparameters() const;
  void _internal_add_reflectanceparameters(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_reflectanceparameters();
  public:
  double reflectanceparameters(int index) const;
  void set_reflectanceparameters(int index, double value);
  void add_reflectanceparameters(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      reflectanceparameters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_reflectanceparameters();

  // repeated double principalAxisDistortion = 7;
  int principalaxisdistortion_size() const;
  private:
  int _internal_principalaxisdistortion_size() const;
  public:
  void clear_principalaxisdistortion();
  private:
  double _internal_principalaxisdistortion(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_principalaxisdistortion() const;
  void _internal_add_principalaxisdistortion(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_principalaxisdistortion();
  public:
  double principalaxisdistortion(int index) const;
  void set_principalaxisdistortion(int index, double value);
  void add_principalaxisdistortion(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      principalaxisdistortion() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_principalaxisdistortion();

  // string shapeModel = 1;
  void clear_shapemodel();
  const std::string& shapemodel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shapemodel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shapemodel();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_shapemodel();
  void set_allocated_shapemodel(std::string* shapemodel);
  private:
  const std::string& _internal_shapemodel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shapemodel(const std::string& value);
  std::string* _internal_mutable_shapemodel();
  public:

  // string brdfModel = 4;
  void clear_brdfmodel();
  const std::string& brdfmodel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_brdfmodel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_brdfmodel();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_brdfmodel();
  void set_allocated_brdfmodel(std::string* brdfmodel);
  private:
  const std::string& _internal_brdfmodel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brdfmodel(const std::string& value);
  std::string* _internal_mutable_brdfmodel();
  public:

  // double perlinNoiseStdDeviation = 2;
  void clear_perlinnoisestddeviation();
  double perlinnoisestddeviation() const;
  void set_perlinnoisestddeviation(double value);
  private:
  double _internal_perlinnoisestddeviation() const;
  void _internal_set_perlinnoisestddeviation(double value);
  public:

  // double proceduralRocks = 3;
  void clear_proceduralrocks();
  double proceduralrocks() const;
  void set_proceduralrocks(double value);
  private:
  double _internal_proceduralrocks() const;
  void _internal_set_proceduralrocks(double value);
  public:

  // double meanRadius = 6;
  void clear_meanradius();
  double meanradius() const;
  void set_meanradius(double value);
  private:
  double _internal_meanradius() const;
  void _internal_set_meanradius(double value);
  public:

  // @@protoc_insertion_point(class_scope:cielimMessage.CelestialModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > reflectanceparameters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > principalaxisdistortion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shapemodel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brdfmodel_;
  double perlinnoisestddeviation_;
  double proceduralrocks_;
  double meanradius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cielimMessage_2eproto;
};
// -------------------------------------------------------------------

class CelestialBody final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cielimMessage.CelestialBody) */ {
 public:
  inline CelestialBody() : CelestialBody(nullptr) {}
  ~CelestialBody() override;
  explicit constexpr CelestialBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CelestialBody(const CelestialBody& from);
  CelestialBody(CelestialBody&& from) noexcept
    : CelestialBody() {
    *this = ::std::move(from);
  }

  inline CelestialBody& operator=(const CelestialBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline CelestialBody& operator=(CelestialBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CelestialBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const CelestialBody* internal_default_instance() {
    return reinterpret_cast<const CelestialBody*>(
               &_CelestialBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CelestialBody& a, CelestialBody& b) {
    a.Swap(&b);
  }
  inline void Swap(CelestialBody* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CelestialBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CelestialBody* New() const final {
    return new CelestialBody();
  }

  CelestialBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CelestialBody>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CelestialBody& from);
  void MergeFrom(const CelestialBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CelestialBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cielimMessage.CelestialBody";
  }
  protected:
  explicit CelestialBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kAttitudeFieldNumber = 4,
    kBodyNameFieldNumber = 1,
    kModelsFieldNumber = 6,
    kCentralBodyFieldNumber = 5,
  };
  // repeated double position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double velocity = 3;
  int velocity_size() const;
  private:
  int _internal_velocity_size() const;
  public:
  void clear_velocity();
  private:
  double _internal_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_velocity() const;
  void _internal_add_velocity(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_velocity();
  public:
  double velocity(int index) const;
  void set_velocity(int index, double value);
  void add_velocity(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_velocity();

  // repeated double attitude = 4;
  int attitude_size() const;
  private:
  int _internal_attitude_size() const;
  public:
  void clear_attitude();
  private:
  double _internal_attitude(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_attitude() const;
  void _internal_add_attitude(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_attitude();
  public:
  double attitude(int index) const;
  void set_attitude(int index, double value);
  void add_attitude(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      attitude() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_attitude();

  // string bodyName = 1;
  void clear_bodyname();
  const std::string& bodyname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bodyname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bodyname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_bodyname();
  void set_allocated_bodyname(std::string* bodyname);
  private:
  const std::string& _internal_bodyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bodyname(const std::string& value);
  std::string* _internal_mutable_bodyname();
  public:

  // .cielimMessage.CelestialModel models = 6;
  bool has_models() const;
  private:
  bool _internal_has_models() const;
  public:
  void clear_models();
  const ::cielimMessage::CelestialModel& models() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::cielimMessage::CelestialModel* release_models();
  ::cielimMessage::CelestialModel* mutable_models();
  void set_allocated_models(::cielimMessage::CelestialModel* models);
  private:
  const ::cielimMessage::CelestialModel& _internal_models() const;
  ::cielimMessage::CelestialModel* _internal_mutable_models();
  public:
  void unsafe_arena_set_allocated_models(
      ::cielimMessage::CelestialModel* models);
  ::cielimMessage::CelestialModel* unsafe_arena_release_models();

  // bool centralBody = 5;
  void clear_centralbody();
  bool centralbody() const;
  void set_centralbody(bool value);
  private:
  bool _internal_centralbody() const;
  void _internal_set_centralbody(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cielimMessage.CelestialBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > velocity_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > attitude_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bodyname_;
  ::cielimMessage::CelestialModel* models_;
  bool centralbody_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cielimMessage_2eproto;
};
// -------------------------------------------------------------------

class Spacecraft final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cielimMessage.Spacecraft) */ {
 public:
  inline Spacecraft() : Spacecraft(nullptr) {}
  ~Spacecraft() override;
  explicit constexpr Spacecraft(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Spacecraft(const Spacecraft& from);
  Spacecraft(Spacecraft&& from) noexcept
    : Spacecraft() {
    *this = ::std::move(from);
  }

  inline Spacecraft& operator=(const Spacecraft& from) {
    CopyFrom(from);
    return *this;
  }
  inline Spacecraft& operator=(Spacecraft&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Spacecraft& default_instance() {
    return *internal_default_instance();
  }
  static inline const Spacecraft* internal_default_instance() {
    return reinterpret_cast<const Spacecraft*>(
               &_Spacecraft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Spacecraft& a, Spacecraft& b) {
    a.Swap(&b);
  }
  inline void Swap(Spacecraft* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Spacecraft* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Spacecraft* New() const final {
    return new Spacecraft();
  }

  Spacecraft* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Spacecraft>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Spacecraft& from);
  void MergeFrom(const Spacecraft& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Spacecraft* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cielimMessage.Spacecraft";
  }
  protected:
  explicit Spacecraft(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kAttitudeFieldNumber = 4,
    kSpacecraftNameFieldNumber = 1,
  };
  // repeated double position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double velocity = 3;
  int velocity_size() const;
  private:
  int _internal_velocity_size() const;
  public:
  void clear_velocity();
  private:
  double _internal_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_velocity() const;
  void _internal_add_velocity(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_velocity();
  public:
  double velocity(int index) const;
  void set_velocity(int index, double value);
  void add_velocity(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_velocity();

  // repeated double attitude = 4;
  int attitude_size() const;
  private:
  int _internal_attitude_size() const;
  public:
  void clear_attitude();
  private:
  double _internal_attitude(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_attitude() const;
  void _internal_add_attitude(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_attitude();
  public:
  double attitude(int index) const;
  void set_attitude(int index, double value);
  void add_attitude(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      attitude() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_attitude();

  // string spacecraftName = 1;
  void clear_spacecraftname();
  const std::string& spacecraftname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spacecraftname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spacecraftname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_spacecraftname();
  void set_allocated_spacecraftname(std::string* spacecraftname);
  private:
  const std::string& _internal_spacecraftname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spacecraftname(const std::string& value);
  std::string* _internal_mutable_spacecraftname();
  public:

  // @@protoc_insertion_point(class_scope:cielimMessage.Spacecraft)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > velocity_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > attitude_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacecraftname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cielimMessage_2eproto;
};
// -------------------------------------------------------------------

class RenderingModel final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cielimMessage.RenderingModel) */ {
 public:
  inline RenderingModel() : RenderingModel(nullptr) {}
  ~RenderingModel() override;
  explicit constexpr RenderingModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderingModel(const RenderingModel& from);
  RenderingModel(RenderingModel&& from) noexcept
    : RenderingModel() {
    *this = ::std::move(from);
  }

  inline RenderingModel& operator=(const RenderingModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderingModel& operator=(RenderingModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RenderingModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderingModel* internal_default_instance() {
    return reinterpret_cast<const RenderingModel*>(
               &_RenderingModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RenderingModel& a, RenderingModel& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderingModel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderingModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenderingModel* New() const final {
    return new RenderingModel();
  }

  RenderingModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenderingModel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RenderingModel& from);
  void MergeFrom(const RenderingModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RenderingModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cielimMessage.RenderingModel";
  }
  protected:
  explicit RenderingModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRenderingFieldNumber = 4,
    kCosmicRayStdDeviationFieldNumber = 1,
    kEnableStrayLightFieldNumber = 2,
    kStarFieldFieldNumber = 3,
    kEnableSmearFieldNumber = 5,
  };
  // string rendering = 4;
  void clear_rendering();
  const std::string& rendering() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rendering(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rendering();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_rendering();
  void set_allocated_rendering(std::string* rendering);
  private:
  const std::string& _internal_rendering() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rendering(const std::string& value);
  std::string* _internal_mutable_rendering();
  public:

  // double cosmicRayStdDeviation = 1;
  void clear_cosmicraystddeviation();
  double cosmicraystddeviation() const;
  void set_cosmicraystddeviation(double value);
  private:
  double _internal_cosmicraystddeviation() const;
  void _internal_set_cosmicraystddeviation(double value);
  public:

  // bool enableStrayLight = 2;
  void clear_enablestraylight();
  bool enablestraylight() const;
  void set_enablestraylight(bool value);
  private:
  bool _internal_enablestraylight() const;
  void _internal_set_enablestraylight(bool value);
  public:

  // bool starField = 3;
  void clear_starfield();
  bool starfield() const;
  void set_starfield(bool value);
  private:
  bool _internal_starfield() const;
  void _internal_set_starfield(bool value);
  public:

  // bool enableSmear = 5;
  void clear_enablesmear();
  bool enablesmear() const;
  void set_enablesmear(bool value);
  private:
  bool _internal_enablesmear() const;
  void _internal_set_enablesmear(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cielimMessage.RenderingModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rendering_;
  double cosmicraystddeviation_;
  bool enablestraylight_;
  bool starfield_;
  bool enablesmear_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cielimMessage_2eproto;
};
// -------------------------------------------------------------------

class CameraModel final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cielimMessage.CameraModel) */ {
 public:
  inline CameraModel() : CameraModel(nullptr) {}
  ~CameraModel() override;
  explicit constexpr CameraModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraModel(const CameraModel& from);
  CameraModel(CameraModel&& from) noexcept
    : CameraModel() {
    *this = ::std::move(from);
  }

  inline CameraModel& operator=(const CameraModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraModel& operator=(CameraModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CameraModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraModel* internal_default_instance() {
    return reinterpret_cast<const CameraModel*>(
               &_CameraModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CameraModel& a, CameraModel& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraModel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraModel* New() const final {
    return new CameraModel();
  }

  CameraModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraModel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CameraModel& from);
  void MergeFrom(const CameraModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cielimMessage.CameraModel";
  }
  protected:
  explicit CameraModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldOfViewFieldNumber = 3,
    kResolutionFieldNumber = 4,
    kCameraPositionInBodyFieldNumber = 5,
    kBodyFrameToCameraMrpFieldNumber = 6,
    kParentNameFieldNumber = 2,
    kRenderParametersFieldNumber = 13,
    kCameraIdFieldNumber = 1,
    kRenderRateFieldNumber = 7,
    kFocalLengthFieldNumber = 8,
    kExposureTimeFieldNumber = 9,
    kPointSpreadFunctionFieldNumber = 10,
    kReadNoiseFieldNumber = 11,
    kSystemGainFieldNumber = 12,
  };
  // repeated double fieldOfView = 3;
  int fieldofview_size() const;
  private:
  int _internal_fieldofview_size() const;
  public:
  void clear_fieldofview();
  private:
  double _internal_fieldofview(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_fieldofview() const;
  void _internal_add_fieldofview(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_fieldofview();
  public:
  double fieldofview(int index) const;
  void set_fieldofview(int index, double value);
  void add_fieldofview(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      fieldofview() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_fieldofview();

  // repeated int64 resolution = 4;
  int resolution_size() const;
  private:
  int _internal_resolution_size() const;
  public:
  void clear_resolution();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_resolution(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_resolution() const;
  void _internal_add_resolution(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_resolution();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 resolution(int index) const;
  void set_resolution(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_resolution(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      resolution() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_resolution();

  // repeated double cameraPositionInBody = 5;
  int camerapositioninbody_size() const;
  private:
  int _internal_camerapositioninbody_size() const;
  public:
  void clear_camerapositioninbody();
  private:
  double _internal_camerapositioninbody(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_camerapositioninbody() const;
  void _internal_add_camerapositioninbody(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_camerapositioninbody();
  public:
  double camerapositioninbody(int index) const;
  void set_camerapositioninbody(int index, double value);
  void add_camerapositioninbody(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      camerapositioninbody() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_camerapositioninbody();

  // repeated double bodyFrameToCameraMrp = 6;
  int bodyframetocameramrp_size() const;
  private:
  int _internal_bodyframetocameramrp_size() const;
  public:
  void clear_bodyframetocameramrp();
  private:
  double _internal_bodyframetocameramrp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_bodyframetocameramrp() const;
  void _internal_add_bodyframetocameramrp(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_bodyframetocameramrp();
  public:
  double bodyframetocameramrp(int index) const;
  void set_bodyframetocameramrp(int index, double value);
  void add_bodyframetocameramrp(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      bodyframetocameramrp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_bodyframetocameramrp();

  // string parentName = 2;
  void clear_parentname();
  const std::string& parentname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parentname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parentname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_parentname();
  void set_allocated_parentname(std::string* parentname);
  private:
  const std::string& _internal_parentname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parentname(const std::string& value);
  std::string* _internal_mutable_parentname();
  public:

  // .cielimMessage.RenderingModel renderParameters = 13;
  bool has_renderparameters() const;
  private:
  bool _internal_has_renderparameters() const;
  public:
  void clear_renderparameters();
  const ::cielimMessage::RenderingModel& renderparameters() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::cielimMessage::RenderingModel* release_renderparameters();
  ::cielimMessage::RenderingModel* mutable_renderparameters();
  void set_allocated_renderparameters(::cielimMessage::RenderingModel* renderparameters);
  private:
  const ::cielimMessage::RenderingModel& _internal_renderparameters() const;
  ::cielimMessage::RenderingModel* _internal_mutable_renderparameters();
  public:
  void unsafe_arena_set_allocated_renderparameters(
      ::cielimMessage::RenderingModel* renderparameters);
  ::cielimMessage::RenderingModel* unsafe_arena_release_renderparameters();

  // int64 cameraId = 1;
  void clear_cameraid();
  ::PROTOBUF_NAMESPACE_ID::int64 cameraid() const;
  void set_cameraid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cameraid() const;
  void _internal_set_cameraid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 renderRate = 7;
  void clear_renderrate();
  ::PROTOBUF_NAMESPACE_ID::uint64 renderrate() const;
  void set_renderrate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_renderrate() const;
  void _internal_set_renderrate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double focalLength = 8;
  void clear_focallength();
  double focallength() const;
  void set_focallength(double value);
  private:
  double _internal_focallength() const;
  void _internal_set_focallength(double value);
  public:

  // double exposureTime = 9;
  void clear_exposuretime();
  double exposuretime() const;
  void set_exposuretime(double value);
  private:
  double _internal_exposuretime() const;
  void _internal_set_exposuretime(double value);
  public:

  // uint64 pointSpreadFunction = 10;
  void clear_pointspreadfunction();
  ::PROTOBUF_NAMESPACE_ID::uint64 pointspreadfunction() const;
  void set_pointspreadfunction(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pointspreadfunction() const;
  void _internal_set_pointspreadfunction(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double readNoise = 11;
  void clear_readnoise();
  double readnoise() const;
  void set_readnoise(double value);
  private:
  double _internal_readnoise() const;
  void _internal_set_readnoise(double value);
  public:

  // double systemGain = 12;
  void clear_systemgain();
  double systemgain() const;
  void set_systemgain(double value);
  private:
  double _internal_systemgain() const;
  void _internal_set_systemgain(double value);
  public:

  // @@protoc_insertion_point(class_scope:cielimMessage.CameraModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > fieldofview_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > resolution_;
  mutable std::atomic<int> _resolution_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > camerapositioninbody_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > bodyframetocameramrp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentname_;
  ::cielimMessage::RenderingModel* renderparameters_;
  ::PROTOBUF_NAMESPACE_ID::int64 cameraid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 renderrate_;
  double focallength_;
  double exposuretime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pointspreadfunction_;
  double readnoise_;
  double systemgain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cielimMessage_2eproto;
};
// -------------------------------------------------------------------

class CielimMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cielimMessage.CielimMessage) */ {
 public:
  inline CielimMessage() : CielimMessage(nullptr) {}
  ~CielimMessage() override;
  explicit constexpr CielimMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CielimMessage(const CielimMessage& from);
  CielimMessage(CielimMessage&& from) noexcept
    : CielimMessage() {
    *this = ::std::move(from);
  }

  inline CielimMessage& operator=(const CielimMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CielimMessage& operator=(CielimMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CielimMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CielimMessage* internal_default_instance() {
    return reinterpret_cast<const CielimMessage*>(
               &_CielimMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CielimMessage& a, CielimMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CielimMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CielimMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CielimMessage* New() const final {
    return new CielimMessage();
  }

  CielimMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CielimMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CielimMessage& from);
  void MergeFrom(const CielimMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CielimMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cielimMessage.CielimMessage";
  }
  protected:
  explicit CielimMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCelestialBodiesFieldNumber = 3,
    kEpochFieldNumber = 1,
    kCurrentTimeFieldNumber = 2,
    kSpacecraftFieldNumber = 4,
    kCameraFieldNumber = 5,
  };
  // repeated .cielimMessage.CelestialBody celestialBodies = 3;
  int celestialbodies_size() const;
  private:
  int _internal_celestialbodies_size() const;
  public:
  void clear_celestialbodies();
  ::cielimMessage::CelestialBody* mutable_celestialbodies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cielimMessage::CelestialBody >*
      mutable_celestialbodies();
  private:
  const ::cielimMessage::CelestialBody& _internal_celestialbodies(int index) const;
  ::cielimMessage::CelestialBody* _internal_add_celestialbodies();
  public:
  const ::cielimMessage::CelestialBody& celestialbodies(int index) const;
  ::cielimMessage::CelestialBody* add_celestialbodies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cielimMessage::CelestialBody >&
      celestialbodies() const;

  // .cielimMessage.EpochDateTime epoch = 1;
  bool has_epoch() const;
  private:
  bool _internal_has_epoch() const;
  public:
  void clear_epoch();
  const ::cielimMessage::EpochDateTime& epoch() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::cielimMessage::EpochDateTime* release_epoch();
  ::cielimMessage::EpochDateTime* mutable_epoch();
  void set_allocated_epoch(::cielimMessage::EpochDateTime* epoch);
  private:
  const ::cielimMessage::EpochDateTime& _internal_epoch() const;
  ::cielimMessage::EpochDateTime* _internal_mutable_epoch();
  public:
  void unsafe_arena_set_allocated_epoch(
      ::cielimMessage::EpochDateTime* epoch);
  ::cielimMessage::EpochDateTime* unsafe_arena_release_epoch();

  // .cielimMessage.TimeStamp currentTime = 2;
  bool has_currenttime() const;
  private:
  bool _internal_has_currenttime() const;
  public:
  void clear_currenttime();
  const ::cielimMessage::TimeStamp& currenttime() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::cielimMessage::TimeStamp* release_currenttime();
  ::cielimMessage::TimeStamp* mutable_currenttime();
  void set_allocated_currenttime(::cielimMessage::TimeStamp* currenttime);
  private:
  const ::cielimMessage::TimeStamp& _internal_currenttime() const;
  ::cielimMessage::TimeStamp* _internal_mutable_currenttime();
  public:
  void unsafe_arena_set_allocated_currenttime(
      ::cielimMessage::TimeStamp* currenttime);
  ::cielimMessage::TimeStamp* unsafe_arena_release_currenttime();

  // .cielimMessage.Spacecraft spacecraft = 4;
  bool has_spacecraft() const;
  private:
  bool _internal_has_spacecraft() const;
  public:
  void clear_spacecraft();
  const ::cielimMessage::Spacecraft& spacecraft() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::cielimMessage::Spacecraft* release_spacecraft();
  ::cielimMessage::Spacecraft* mutable_spacecraft();
  void set_allocated_spacecraft(::cielimMessage::Spacecraft* spacecraft);
  private:
  const ::cielimMessage::Spacecraft& _internal_spacecraft() const;
  ::cielimMessage::Spacecraft* _internal_mutable_spacecraft();
  public:
  void unsafe_arena_set_allocated_spacecraft(
      ::cielimMessage::Spacecraft* spacecraft);
  ::cielimMessage::Spacecraft* unsafe_arena_release_spacecraft();

  // .cielimMessage.CameraModel camera = 5;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::cielimMessage::CameraModel& camera() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::cielimMessage::CameraModel* release_camera();
  ::cielimMessage::CameraModel* mutable_camera();
  void set_allocated_camera(::cielimMessage::CameraModel* camera);
  private:
  const ::cielimMessage::CameraModel& _internal_camera() const;
  ::cielimMessage::CameraModel* _internal_mutable_camera();
  public:
  void unsafe_arena_set_allocated_camera(
      ::cielimMessage::CameraModel* camera);
  ::cielimMessage::CameraModel* unsafe_arena_release_camera();

  // @@protoc_insertion_point(class_scope:cielimMessage.CielimMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cielimMessage::CelestialBody > celestialbodies_;
  ::cielimMessage::EpochDateTime* epoch_;
  ::cielimMessage::TimeStamp* currenttime_;
  ::cielimMessage::Spacecraft* spacecraft_;
  ::cielimMessage::CameraModel* camera_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cielimMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TimeStamp

// int64 frameNumber = 1;
inline void TimeStamp::clear_framenumber() {
  framenumber_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeStamp::_internal_framenumber() const {
  return framenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeStamp::framenumber() const {
  // @@protoc_insertion_point(field_get:cielimMessage.TimeStamp.frameNumber)
  return _internal_framenumber();
}
inline void TimeStamp::_internal_set_framenumber(::PROTOBUF_NAMESPACE_ID::int64 value) {

  framenumber_ = value;
}
inline void TimeStamp::set_framenumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_framenumber(value);
  // @@protoc_insertion_point(field_set:cielimMessage.TimeStamp.frameNumber)
}

// double simTimeElapsed = 2;
inline void TimeStamp::clear_simtimeelapsed() {
  simtimeelapsed_ = 0;
}
inline double TimeStamp::_internal_simtimeelapsed() const {
  return simtimeelapsed_;
}
inline double TimeStamp::simtimeelapsed() const {
  // @@protoc_insertion_point(field_get:cielimMessage.TimeStamp.simTimeElapsed)
  return _internal_simtimeelapsed();
}
inline void TimeStamp::_internal_set_simtimeelapsed(double value) {

  simtimeelapsed_ = value;
}
inline void TimeStamp::set_simtimeelapsed(double value) {
  _internal_set_simtimeelapsed(value);
  // @@protoc_insertion_point(field_set:cielimMessage.TimeStamp.simTimeElapsed)
}

// -------------------------------------------------------------------

// EpochDateTime

// int32 year = 1;
inline void EpochDateTime::clear_year() {
  year_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochDateTime::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochDateTime::year() const {
  // @@protoc_insertion_point(field_get:cielimMessage.EpochDateTime.year)
  return _internal_year();
}
inline void EpochDateTime::_internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {

  year_ = value;
}
inline void EpochDateTime::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:cielimMessage.EpochDateTime.year)
}

// int32 month = 2;
inline void EpochDateTime::clear_month() {
  month_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochDateTime::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochDateTime::month() const {
  // @@protoc_insertion_point(field_get:cielimMessage.EpochDateTime.month)
  return _internal_month();
}
inline void EpochDateTime::_internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {

  month_ = value;
}
inline void EpochDateTime::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:cielimMessage.EpochDateTime.month)
}

// int32 day = 3;
inline void EpochDateTime::clear_day() {
  day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochDateTime::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochDateTime::day() const {
  // @@protoc_insertion_point(field_get:cielimMessage.EpochDateTime.day)
  return _internal_day();
}
inline void EpochDateTime::_internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {

  day_ = value;
}
inline void EpochDateTime::set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:cielimMessage.EpochDateTime.day)
}

// int32 hours = 4;
inline void EpochDateTime::clear_hours() {
  hours_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochDateTime::_internal_hours() const {
  return hours_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochDateTime::hours() const {
  // @@protoc_insertion_point(field_get:cielimMessage.EpochDateTime.hours)
  return _internal_hours();
}
inline void EpochDateTime::_internal_set_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {

  hours_ = value;
}
inline void EpochDateTime::set_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hours(value);
  // @@protoc_insertion_point(field_set:cielimMessage.EpochDateTime.hours)
}

// int32 minutes = 5;
inline void EpochDateTime::clear_minutes() {
  minutes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochDateTime::_internal_minutes() const {
  return minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EpochDateTime::minutes() const {
  // @@protoc_insertion_point(field_get:cielimMessage.EpochDateTime.minutes)
  return _internal_minutes();
}
inline void EpochDateTime::_internal_set_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {

  minutes_ = value;
}
inline void EpochDateTime::set_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minutes(value);
  // @@protoc_insertion_point(field_set:cielimMessage.EpochDateTime.minutes)
}

// double seconds = 6;
inline void EpochDateTime::clear_seconds() {
  seconds_ = 0;
}
inline double EpochDateTime::_internal_seconds() const {
  return seconds_;
}
inline double EpochDateTime::seconds() const {
  // @@protoc_insertion_point(field_get:cielimMessage.EpochDateTime.seconds)
  return _internal_seconds();
}
inline void EpochDateTime::_internal_set_seconds(double value) {

  seconds_ = value;
}
inline void EpochDateTime::set_seconds(double value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:cielimMessage.EpochDateTime.seconds)
}

// -------------------------------------------------------------------

// CelestialModel

// string shapeModel = 1;
inline void CelestialModel::clear_shapemodel() {
  shapemodel_.ClearToEmpty();
}
inline const std::string& CelestialModel::shapemodel() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CelestialModel.shapeModel)
  return _internal_shapemodel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CelestialModel::set_shapemodel(ArgT0&& arg0, ArgT... args) {

 shapemodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cielimMessage.CelestialModel.shapeModel)
}
inline std::string* CelestialModel::mutable_shapemodel() {
  // @@protoc_insertion_point(field_mutable:cielimMessage.CelestialModel.shapeModel)
  return _internal_mutable_shapemodel();
}
inline const std::string& CelestialModel::_internal_shapemodel() const {
  return shapemodel_.Get();
}
inline void CelestialModel::_internal_set_shapemodel(const std::string& value) {

  shapemodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CelestialModel::_internal_mutable_shapemodel() {

  return shapemodel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CelestialModel::release_shapemodel() {
  // @@protoc_insertion_point(field_release:cielimMessage.CelestialModel.shapeModel)
  return shapemodel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CelestialModel::set_allocated_shapemodel(std::string* shapemodel) {
  if (shapemodel != nullptr) {

  } else {

  }
  shapemodel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shapemodel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:cielimMessage.CelestialModel.shapeModel)
}

// double perlinNoiseStdDeviation = 2;
inline void CelestialModel::clear_perlinnoisestddeviation() {
  perlinnoisestddeviation_ = 0;
}
inline double CelestialModel::_internal_perlinnoisestddeviation() const {
  return perlinnoisestddeviation_;
}
inline double CelestialModel::perlinnoisestddeviation() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CelestialModel.perlinNoiseStdDeviation)
  return _internal_perlinnoisestddeviation();
}
inline void CelestialModel::_internal_set_perlinnoisestddeviation(double value) {

  perlinnoisestddeviation_ = value;
}
inline void CelestialModel::set_perlinnoisestddeviation(double value) {
  _internal_set_perlinnoisestddeviation(value);
  // @@protoc_insertion_point(field_set:cielimMessage.CelestialModel.perlinNoiseStdDeviation)
}

// double proceduralRocks = 3;
inline void CelestialModel::clear_proceduralrocks() {
  proceduralrocks_ = 0;
}
inline double CelestialModel::_internal_proceduralrocks() const {
  return proceduralrocks_;
}
inline double CelestialModel::proceduralrocks() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CelestialModel.proceduralRocks)
  return _internal_proceduralrocks();
}
inline void CelestialModel::_internal_set_proceduralrocks(double value) {

  proceduralrocks_ = value;
}
inline void CelestialModel::set_proceduralrocks(double value) {
  _internal_set_proceduralrocks(value);
  // @@protoc_insertion_point(field_set:cielimMessage.CelestialModel.proceduralRocks)
}

// string brdfModel = 4;
inline void CelestialModel::clear_brdfmodel() {
  brdfmodel_.ClearToEmpty();
}
inline const std::string& CelestialModel::brdfmodel() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CelestialModel.brdfModel)
  return _internal_brdfmodel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CelestialModel::set_brdfmodel(ArgT0&& arg0, ArgT... args) {

 brdfmodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cielimMessage.CelestialModel.brdfModel)
}
inline std::string* CelestialModel::mutable_brdfmodel() {
  // @@protoc_insertion_point(field_mutable:cielimMessage.CelestialModel.brdfModel)
  return _internal_mutable_brdfmodel();
}
inline const std::string& CelestialModel::_internal_brdfmodel() const {
  return brdfmodel_.Get();
}
inline void CelestialModel::_internal_set_brdfmodel(const std::string& value) {

  brdfmodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CelestialModel::_internal_mutable_brdfmodel() {

  return brdfmodel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CelestialModel::release_brdfmodel() {
  // @@protoc_insertion_point(field_release:cielimMessage.CelestialModel.brdfModel)
  return brdfmodel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CelestialModel::set_allocated_brdfmodel(std::string* brdfmodel) {
  if (brdfmodel != nullptr) {

  } else {

  }
  brdfmodel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brdfmodel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:cielimMessage.CelestialModel.brdfModel)
}

// repeated double reflectanceParameters = 5;
inline int CelestialModel::_internal_reflectanceparameters_size() const {
  return reflectanceparameters_.size();
}
inline int CelestialModel::reflectanceparameters_size() const {
  return _internal_reflectanceparameters_size();
}
inline void CelestialModel::clear_reflectanceparameters() {
  reflectanceparameters_.Clear();
}
inline double CelestialModel::_internal_reflectanceparameters(int index) const {
  return reflectanceparameters_.Get(index);
}
inline double CelestialModel::reflectanceparameters(int index) const {
  // @@protoc_insertion_point(field_get:cielimMessage.CelestialModel.reflectanceParameters)
  return _internal_reflectanceparameters(index);
}
inline void CelestialModel::set_reflectanceparameters(int index, double value) {
  reflectanceparameters_.Set(index, value);
  // @@protoc_insertion_point(field_set:cielimMessage.CelestialModel.reflectanceParameters)
}
inline void CelestialModel::_internal_add_reflectanceparameters(double value) {
  reflectanceparameters_.Add(value);
}
inline void CelestialModel::add_reflectanceparameters(double value) {
  _internal_add_reflectanceparameters(value);
  // @@protoc_insertion_point(field_add:cielimMessage.CelestialModel.reflectanceParameters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CelestialModel::_internal_reflectanceparameters() const {
  return reflectanceparameters_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CelestialModel::reflectanceparameters() const {
  // @@protoc_insertion_point(field_list:cielimMessage.CelestialModel.reflectanceParameters)
  return _internal_reflectanceparameters();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CelestialModel::_internal_mutable_reflectanceparameters() {
  return &reflectanceparameters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CelestialModel::mutable_reflectanceparameters() {
  // @@protoc_insertion_point(field_mutable_list:cielimMessage.CelestialModel.reflectanceParameters)
  return _internal_mutable_reflectanceparameters();
}

// double meanRadius = 6;
inline void CelestialModel::clear_meanradius() {
  meanradius_ = 0;
}
inline double CelestialModel::_internal_meanradius() const {
  return meanradius_;
}
inline double CelestialModel::meanradius() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CelestialModel.meanRadius)
  return _internal_meanradius();
}
inline void CelestialModel::_internal_set_meanradius(double value) {

  meanradius_ = value;
}
inline void CelestialModel::set_meanradius(double value) {
  _internal_set_meanradius(value);
  // @@protoc_insertion_point(field_set:cielimMessage.CelestialModel.meanRadius)
}

// repeated double principalAxisDistortion = 7;
inline int CelestialModel::_internal_principalaxisdistortion_size() const {
  return principalaxisdistortion_.size();
}
inline int CelestialModel::principalaxisdistortion_size() const {
  return _internal_principalaxisdistortion_size();
}
inline void CelestialModel::clear_principalaxisdistortion() {
  principalaxisdistortion_.Clear();
}
inline double CelestialModel::_internal_principalaxisdistortion(int index) const {
  return principalaxisdistortion_.Get(index);
}
inline double CelestialModel::principalaxisdistortion(int index) const {
  // @@protoc_insertion_point(field_get:cielimMessage.CelestialModel.principalAxisDistortion)
  return _internal_principalaxisdistortion(index);
}
inline void CelestialModel::set_principalaxisdistortion(int index, double value) {
  principalaxisdistortion_.Set(index, value);
  // @@protoc_insertion_point(field_set:cielimMessage.CelestialModel.principalAxisDistortion)
}
inline void CelestialModel::_internal_add_principalaxisdistortion(double value) {
  principalaxisdistortion_.Add(value);
}
inline void CelestialModel::add_principalaxisdistortion(double value) {
  _internal_add_principalaxisdistortion(value);
  // @@protoc_insertion_point(field_add:cielimMessage.CelestialModel.principalAxisDistortion)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CelestialModel::_internal_principalaxisdistortion() const {
  return principalaxisdistortion_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CelestialModel::principalaxisdistortion() const {
  // @@protoc_insertion_point(field_list:cielimMessage.CelestialModel.principalAxisDistortion)
  return _internal_principalaxisdistortion();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CelestialModel::_internal_mutable_principalaxisdistortion() {
  return &principalaxisdistortion_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CelestialModel::mutable_principalaxisdistortion() {
  // @@protoc_insertion_point(field_mutable_list:cielimMessage.CelestialModel.principalAxisDistortion)
  return _internal_mutable_principalaxisdistortion();
}

// -------------------------------------------------------------------

// CelestialBody

// string bodyName = 1;
inline void CelestialBody::clear_bodyname() {
  bodyname_.ClearToEmpty();
}
inline const std::string& CelestialBody::bodyname() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CelestialBody.bodyName)
  return _internal_bodyname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CelestialBody::set_bodyname(ArgT0&& arg0, ArgT... args) {

 bodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cielimMessage.CelestialBody.bodyName)
}
inline std::string* CelestialBody::mutable_bodyname() {
  // @@protoc_insertion_point(field_mutable:cielimMessage.CelestialBody.bodyName)
  return _internal_mutable_bodyname();
}
inline const std::string& CelestialBody::_internal_bodyname() const {
  return bodyname_.Get();
}
inline void CelestialBody::_internal_set_bodyname(const std::string& value) {

  bodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CelestialBody::_internal_mutable_bodyname() {

  return bodyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CelestialBody::release_bodyname() {
  // @@protoc_insertion_point(field_release:cielimMessage.CelestialBody.bodyName)
  return bodyname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CelestialBody::set_allocated_bodyname(std::string* bodyname) {
  if (bodyname != nullptr) {

  } else {

  }
  bodyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bodyname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:cielimMessage.CelestialBody.bodyName)
}

// repeated double position = 2;
inline int CelestialBody::_internal_position_size() const {
  return position_.size();
}
inline int CelestialBody::position_size() const {
  return _internal_position_size();
}
inline void CelestialBody::clear_position() {
  position_.Clear();
}
inline double CelestialBody::_internal_position(int index) const {
  return position_.Get(index);
}
inline double CelestialBody::position(int index) const {
  // @@protoc_insertion_point(field_get:cielimMessage.CelestialBody.position)
  return _internal_position(index);
}
inline void CelestialBody::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:cielimMessage.CelestialBody.position)
}
inline void CelestialBody::_internal_add_position(double value) {
  position_.Add(value);
}
inline void CelestialBody::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:cielimMessage.CelestialBody.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CelestialBody::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CelestialBody::position() const {
  // @@protoc_insertion_point(field_list:cielimMessage.CelestialBody.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CelestialBody::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CelestialBody::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:cielimMessage.CelestialBody.position)
  return _internal_mutable_position();
}

// repeated double velocity = 3;
inline int CelestialBody::_internal_velocity_size() const {
  return velocity_.size();
}
inline int CelestialBody::velocity_size() const {
  return _internal_velocity_size();
}
inline void CelestialBody::clear_velocity() {
  velocity_.Clear();
}
inline double CelestialBody::_internal_velocity(int index) const {
  return velocity_.Get(index);
}
inline double CelestialBody::velocity(int index) const {
  // @@protoc_insertion_point(field_get:cielimMessage.CelestialBody.velocity)
  return _internal_velocity(index);
}
inline void CelestialBody::set_velocity(int index, double value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:cielimMessage.CelestialBody.velocity)
}
inline void CelestialBody::_internal_add_velocity(double value) {
  velocity_.Add(value);
}
inline void CelestialBody::add_velocity(double value) {
  _internal_add_velocity(value);
  // @@protoc_insertion_point(field_add:cielimMessage.CelestialBody.velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CelestialBody::_internal_velocity() const {
  return velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CelestialBody::velocity() const {
  // @@protoc_insertion_point(field_list:cielimMessage.CelestialBody.velocity)
  return _internal_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CelestialBody::_internal_mutable_velocity() {
  return &velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CelestialBody::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:cielimMessage.CelestialBody.velocity)
  return _internal_mutable_velocity();
}

// repeated double attitude = 4;
inline int CelestialBody::_internal_attitude_size() const {
  return attitude_.size();
}
inline int CelestialBody::attitude_size() const {
  return _internal_attitude_size();
}
inline void CelestialBody::clear_attitude() {
  attitude_.Clear();
}
inline double CelestialBody::_internal_attitude(int index) const {
  return attitude_.Get(index);
}
inline double CelestialBody::attitude(int index) const {
  // @@protoc_insertion_point(field_get:cielimMessage.CelestialBody.attitude)
  return _internal_attitude(index);
}
inline void CelestialBody::set_attitude(int index, double value) {
  attitude_.Set(index, value);
  // @@protoc_insertion_point(field_set:cielimMessage.CelestialBody.attitude)
}
inline void CelestialBody::_internal_add_attitude(double value) {
  attitude_.Add(value);
}
inline void CelestialBody::add_attitude(double value) {
  _internal_add_attitude(value);
  // @@protoc_insertion_point(field_add:cielimMessage.CelestialBody.attitude)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CelestialBody::_internal_attitude() const {
  return attitude_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CelestialBody::attitude() const {
  // @@protoc_insertion_point(field_list:cielimMessage.CelestialBody.attitude)
  return _internal_attitude();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CelestialBody::_internal_mutable_attitude() {
  return &attitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CelestialBody::mutable_attitude() {
  // @@protoc_insertion_point(field_mutable_list:cielimMessage.CelestialBody.attitude)
  return _internal_mutable_attitude();
}

// bool centralBody = 5;
inline void CelestialBody::clear_centralbody() {
  centralbody_ = false;
}
inline bool CelestialBody::_internal_centralbody() const {
  return centralbody_;
}
inline bool CelestialBody::centralbody() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CelestialBody.centralBody)
  return _internal_centralbody();
}
inline void CelestialBody::_internal_set_centralbody(bool value) {

  centralbody_ = value;
}
inline void CelestialBody::set_centralbody(bool value) {
  _internal_set_centralbody(value);
  // @@protoc_insertion_point(field_set:cielimMessage.CelestialBody.centralBody)
}

// .cielimMessage.CelestialModel models = 6;
inline bool CelestialBody::_internal_has_models() const {
  return this != internal_default_instance() && models_ != nullptr;
}
inline bool CelestialBody::has_models() const {
  return _internal_has_models();
}
inline void CelestialBody::clear_models() {
  if (GetArenaForAllocation() == nullptr && models_ != nullptr) {
    delete models_;
  }
  models_ = nullptr;
}
inline const ::cielimMessage::CelestialModel& CelestialBody::_internal_models() const {
  const ::cielimMessage::CelestialModel* p = models_;
  return p != nullptr ? *p : reinterpret_cast<const ::cielimMessage::CelestialModel&>(
      ::cielimMessage::_CelestialModel_default_instance_);
}
inline const ::cielimMessage::CelestialModel& CelestialBody::models() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CelestialBody.models)
  return _internal_models();
}
inline void CelestialBody::unsafe_arena_set_allocated_models(
    ::cielimMessage::CelestialModel* models) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(models_);
  }
  models_ = models;
  if (models) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cielimMessage.CelestialBody.models)
}
inline ::cielimMessage::CelestialModel* CelestialBody::release_models() {

  ::cielimMessage::CelestialModel* temp = models_;
  models_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cielimMessage::CelestialModel* CelestialBody::unsafe_arena_release_models() {
  // @@protoc_insertion_point(field_release:cielimMessage.CelestialBody.models)

  ::cielimMessage::CelestialModel* temp = models_;
  models_ = nullptr;
  return temp;
}
inline ::cielimMessage::CelestialModel* CelestialBody::_internal_mutable_models() {

  if (models_ == nullptr) {
    auto* p = CreateMaybeMessage<::cielimMessage::CelestialModel>(GetArenaForAllocation());
    models_ = p;
  }
  return models_;
}
inline ::cielimMessage::CelestialModel* CelestialBody::mutable_models() {
  // @@protoc_insertion_point(field_mutable:cielimMessage.CelestialBody.models)
  return _internal_mutable_models();
}
inline void CelestialBody::set_allocated_models(::cielimMessage::CelestialModel* models) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete models_;
  }
  if (models) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cielimMessage::CelestialModel>::GetOwningArena(models);
    if (message_arena != submessage_arena) {
      models = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, models, submessage_arena);
    }

  } else {

  }
  models_ = models;
  // @@protoc_insertion_point(field_set_allocated:cielimMessage.CelestialBody.models)
}

// -------------------------------------------------------------------

// Spacecraft

// string spacecraftName = 1;
inline void Spacecraft::clear_spacecraftname() {
  spacecraftname_.ClearToEmpty();
}
inline const std::string& Spacecraft::spacecraftname() const {
  // @@protoc_insertion_point(field_get:cielimMessage.Spacecraft.spacecraftName)
  return _internal_spacecraftname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Spacecraft::set_spacecraftname(ArgT0&& arg0, ArgT... args) {

 spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cielimMessage.Spacecraft.spacecraftName)
}
inline std::string* Spacecraft::mutable_spacecraftname() {
  // @@protoc_insertion_point(field_mutable:cielimMessage.Spacecraft.spacecraftName)
  return _internal_mutable_spacecraftname();
}
inline const std::string& Spacecraft::_internal_spacecraftname() const {
  return spacecraftname_.Get();
}
inline void Spacecraft::_internal_set_spacecraftname(const std::string& value) {

  spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Spacecraft::_internal_mutable_spacecraftname() {

  return spacecraftname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Spacecraft::release_spacecraftname() {
  // @@protoc_insertion_point(field_release:cielimMessage.Spacecraft.spacecraftName)
  return spacecraftname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Spacecraft::set_allocated_spacecraftname(std::string* spacecraftname) {
  if (spacecraftname != nullptr) {

  } else {

  }
  spacecraftname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacecraftname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:cielimMessage.Spacecraft.spacecraftName)
}

// repeated double position = 2;
inline int Spacecraft::_internal_position_size() const {
  return position_.size();
}
inline int Spacecraft::position_size() const {
  return _internal_position_size();
}
inline void Spacecraft::clear_position() {
  position_.Clear();
}
inline double Spacecraft::_internal_position(int index) const {
  return position_.Get(index);
}
inline double Spacecraft::position(int index) const {
  // @@protoc_insertion_point(field_get:cielimMessage.Spacecraft.position)
  return _internal_position(index);
}
inline void Spacecraft::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:cielimMessage.Spacecraft.position)
}
inline void Spacecraft::_internal_add_position(double value) {
  position_.Add(value);
}
inline void Spacecraft::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:cielimMessage.Spacecraft.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Spacecraft::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Spacecraft::position() const {
  // @@protoc_insertion_point(field_list:cielimMessage.Spacecraft.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Spacecraft::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Spacecraft::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:cielimMessage.Spacecraft.position)
  return _internal_mutable_position();
}

// repeated double velocity = 3;
inline int Spacecraft::_internal_velocity_size() const {
  return velocity_.size();
}
inline int Spacecraft::velocity_size() const {
  return _internal_velocity_size();
}
inline void Spacecraft::clear_velocity() {
  velocity_.Clear();
}
inline double Spacecraft::_internal_velocity(int index) const {
  return velocity_.Get(index);
}
inline double Spacecraft::velocity(int index) const {
  // @@protoc_insertion_point(field_get:cielimMessage.Spacecraft.velocity)
  return _internal_velocity(index);
}
inline void Spacecraft::set_velocity(int index, double value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:cielimMessage.Spacecraft.velocity)
}
inline void Spacecraft::_internal_add_velocity(double value) {
  velocity_.Add(value);
}
inline void Spacecraft::add_velocity(double value) {
  _internal_add_velocity(value);
  // @@protoc_insertion_point(field_add:cielimMessage.Spacecraft.velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Spacecraft::_internal_velocity() const {
  return velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Spacecraft::velocity() const {
  // @@protoc_insertion_point(field_list:cielimMessage.Spacecraft.velocity)
  return _internal_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Spacecraft::_internal_mutable_velocity() {
  return &velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Spacecraft::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:cielimMessage.Spacecraft.velocity)
  return _internal_mutable_velocity();
}

// repeated double attitude = 4;
inline int Spacecraft::_internal_attitude_size() const {
  return attitude_.size();
}
inline int Spacecraft::attitude_size() const {
  return _internal_attitude_size();
}
inline void Spacecraft::clear_attitude() {
  attitude_.Clear();
}
inline double Spacecraft::_internal_attitude(int index) const {
  return attitude_.Get(index);
}
inline double Spacecraft::attitude(int index) const {
  // @@protoc_insertion_point(field_get:cielimMessage.Spacecraft.attitude)
  return _internal_attitude(index);
}
inline void Spacecraft::set_attitude(int index, double value) {
  attitude_.Set(index, value);
  // @@protoc_insertion_point(field_set:cielimMessage.Spacecraft.attitude)
}
inline void Spacecraft::_internal_add_attitude(double value) {
  attitude_.Add(value);
}
inline void Spacecraft::add_attitude(double value) {
  _internal_add_attitude(value);
  // @@protoc_insertion_point(field_add:cielimMessage.Spacecraft.attitude)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Spacecraft::_internal_attitude() const {
  return attitude_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Spacecraft::attitude() const {
  // @@protoc_insertion_point(field_list:cielimMessage.Spacecraft.attitude)
  return _internal_attitude();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Spacecraft::_internal_mutable_attitude() {
  return &attitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Spacecraft::mutable_attitude() {
  // @@protoc_insertion_point(field_mutable_list:cielimMessage.Spacecraft.attitude)
  return _internal_mutable_attitude();
}

// -------------------------------------------------------------------

// RenderingModel

// double cosmicRayStdDeviation = 1;
inline void RenderingModel::clear_cosmicraystddeviation() {
  cosmicraystddeviation_ = 0;
}
inline double RenderingModel::_internal_cosmicraystddeviation() const {
  return cosmicraystddeviation_;
}
inline double RenderingModel::cosmicraystddeviation() const {
  // @@protoc_insertion_point(field_get:cielimMessage.RenderingModel.cosmicRayStdDeviation)
  return _internal_cosmicraystddeviation();
}
inline void RenderingModel::_internal_set_cosmicraystddeviation(double value) {

  cosmicraystddeviation_ = value;
}
inline void RenderingModel::set_cosmicraystddeviation(double value) {
  _internal_set_cosmicraystddeviation(value);
  // @@protoc_insertion_point(field_set:cielimMessage.RenderingModel.cosmicRayStdDeviation)
}

// bool enableStrayLight = 2;
inline void RenderingModel::clear_enablestraylight() {
  enablestraylight_ = false;
}
inline bool RenderingModel::_internal_enablestraylight() const {
  return enablestraylight_;
}
inline bool RenderingModel::enablestraylight() const {
  // @@protoc_insertion_point(field_get:cielimMessage.RenderingModel.enableStrayLight)
  return _internal_enablestraylight();
}
inline void RenderingModel::_internal_set_enablestraylight(bool value) {

  enablestraylight_ = value;
}
inline void RenderingModel::set_enablestraylight(bool value) {
  _internal_set_enablestraylight(value);
  // @@protoc_insertion_point(field_set:cielimMessage.RenderingModel.enableStrayLight)
}

// bool starField = 3;
inline void RenderingModel::clear_starfield() {
  starfield_ = false;
}
inline bool RenderingModel::_internal_starfield() const {
  return starfield_;
}
inline bool RenderingModel::starfield() const {
  // @@protoc_insertion_point(field_get:cielimMessage.RenderingModel.starField)
  return _internal_starfield();
}
inline void RenderingModel::_internal_set_starfield(bool value) {

  starfield_ = value;
}
inline void RenderingModel::set_starfield(bool value) {
  _internal_set_starfield(value);
  // @@protoc_insertion_point(field_set:cielimMessage.RenderingModel.starField)
}

// string rendering = 4;
inline void RenderingModel::clear_rendering() {
  rendering_.ClearToEmpty();
}
inline const std::string& RenderingModel::rendering() const {
  // @@protoc_insertion_point(field_get:cielimMessage.RenderingModel.rendering)
  return _internal_rendering();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenderingModel::set_rendering(ArgT0&& arg0, ArgT... args) {

 rendering_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cielimMessage.RenderingModel.rendering)
}
inline std::string* RenderingModel::mutable_rendering() {
  // @@protoc_insertion_point(field_mutable:cielimMessage.RenderingModel.rendering)
  return _internal_mutable_rendering();
}
inline const std::string& RenderingModel::_internal_rendering() const {
  return rendering_.Get();
}
inline void RenderingModel::_internal_set_rendering(const std::string& value) {

  rendering_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RenderingModel::_internal_mutable_rendering() {

  return rendering_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RenderingModel::release_rendering() {
  // @@protoc_insertion_point(field_release:cielimMessage.RenderingModel.rendering)
  return rendering_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RenderingModel::set_allocated_rendering(std::string* rendering) {
  if (rendering != nullptr) {

  } else {

  }
  rendering_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rendering,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:cielimMessage.RenderingModel.rendering)
}

// bool enableSmear = 5;
inline void RenderingModel::clear_enablesmear() {
  enablesmear_ = false;
}
inline bool RenderingModel::_internal_enablesmear() const {
  return enablesmear_;
}
inline bool RenderingModel::enablesmear() const {
  // @@protoc_insertion_point(field_get:cielimMessage.RenderingModel.enableSmear)
  return _internal_enablesmear();
}
inline void RenderingModel::_internal_set_enablesmear(bool value) {

  enablesmear_ = value;
}
inline void RenderingModel::set_enablesmear(bool value) {
  _internal_set_enablesmear(value);
  // @@protoc_insertion_point(field_set:cielimMessage.RenderingModel.enableSmear)
}

// -------------------------------------------------------------------

// CameraModel

// int64 cameraId = 1;
inline void CameraModel::clear_cameraid() {
  cameraid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CameraModel::_internal_cameraid() const {
  return cameraid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CameraModel::cameraid() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CameraModel.cameraId)
  return _internal_cameraid();
}
inline void CameraModel::_internal_set_cameraid(::PROTOBUF_NAMESPACE_ID::int64 value) {

  cameraid_ = value;
}
inline void CameraModel::set_cameraid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cameraid(value);
  // @@protoc_insertion_point(field_set:cielimMessage.CameraModel.cameraId)
}

// string parentName = 2;
inline void CameraModel::clear_parentname() {
  parentname_.ClearToEmpty();
}
inline const std::string& CameraModel::parentname() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CameraModel.parentName)
  return _internal_parentname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraModel::set_parentname(ArgT0&& arg0, ArgT... args) {

 parentname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cielimMessage.CameraModel.parentName)
}
inline std::string* CameraModel::mutable_parentname() {
  // @@protoc_insertion_point(field_mutable:cielimMessage.CameraModel.parentName)
  return _internal_mutable_parentname();
}
inline const std::string& CameraModel::_internal_parentname() const {
  return parentname_.Get();
}
inline void CameraModel::_internal_set_parentname(const std::string& value) {

  parentname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CameraModel::_internal_mutable_parentname() {

  return parentname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CameraModel::release_parentname() {
  // @@protoc_insertion_point(field_release:cielimMessage.CameraModel.parentName)
  return parentname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CameraModel::set_allocated_parentname(std::string* parentname) {
  if (parentname != nullptr) {

  } else {

  }
  parentname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:cielimMessage.CameraModel.parentName)
}

// repeated double fieldOfView = 3;
inline int CameraModel::_internal_fieldofview_size() const {
  return fieldofview_.size();
}
inline int CameraModel::fieldofview_size() const {
  return _internal_fieldofview_size();
}
inline void CameraModel::clear_fieldofview() {
  fieldofview_.Clear();
}
inline double CameraModel::_internal_fieldofview(int index) const {
  return fieldofview_.Get(index);
}
inline double CameraModel::fieldofview(int index) const {
  // @@protoc_insertion_point(field_get:cielimMessage.CameraModel.fieldOfView)
  return _internal_fieldofview(index);
}
inline void CameraModel::set_fieldofview(int index, double value) {
  fieldofview_.Set(index, value);
  // @@protoc_insertion_point(field_set:cielimMessage.CameraModel.fieldOfView)
}
inline void CameraModel::_internal_add_fieldofview(double value) {
  fieldofview_.Add(value);
}
inline void CameraModel::add_fieldofview(double value) {
  _internal_add_fieldofview(value);
  // @@protoc_insertion_point(field_add:cielimMessage.CameraModel.fieldOfView)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraModel::_internal_fieldofview() const {
  return fieldofview_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraModel::fieldofview() const {
  // @@protoc_insertion_point(field_list:cielimMessage.CameraModel.fieldOfView)
  return _internal_fieldofview();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraModel::_internal_mutable_fieldofview() {
  return &fieldofview_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraModel::mutable_fieldofview() {
  // @@protoc_insertion_point(field_mutable_list:cielimMessage.CameraModel.fieldOfView)
  return _internal_mutable_fieldofview();
}

// repeated int64 resolution = 4;
inline int CameraModel::_internal_resolution_size() const {
  return resolution_.size();
}
inline int CameraModel::resolution_size() const {
  return _internal_resolution_size();
}
inline void CameraModel::clear_resolution() {
  resolution_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CameraModel::_internal_resolution(int index) const {
  return resolution_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CameraModel::resolution(int index) const {
  // @@protoc_insertion_point(field_get:cielimMessage.CameraModel.resolution)
  return _internal_resolution(index);
}
inline void CameraModel::set_resolution(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  resolution_.Set(index, value);
  // @@protoc_insertion_point(field_set:cielimMessage.CameraModel.resolution)
}
inline void CameraModel::_internal_add_resolution(::PROTOBUF_NAMESPACE_ID::int64 value) {
  resolution_.Add(value);
}
inline void CameraModel::add_resolution(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_resolution(value);
  // @@protoc_insertion_point(field_add:cielimMessage.CameraModel.resolution)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CameraModel::_internal_resolution() const {
  return resolution_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CameraModel::resolution() const {
  // @@protoc_insertion_point(field_list:cielimMessage.CameraModel.resolution)
  return _internal_resolution();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CameraModel::_internal_mutable_resolution() {
  return &resolution_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CameraModel::mutable_resolution() {
  // @@protoc_insertion_point(field_mutable_list:cielimMessage.CameraModel.resolution)
  return _internal_mutable_resolution();
}

// repeated double cameraPositionInBody = 5;
inline int CameraModel::_internal_camerapositioninbody_size() const {
  return camerapositioninbody_.size();
}
inline int CameraModel::camerapositioninbody_size() const {
  return _internal_camerapositioninbody_size();
}
inline void CameraModel::clear_camerapositioninbody() {
  camerapositioninbody_.Clear();
}
inline double CameraModel::_internal_camerapositioninbody(int index) const {
  return camerapositioninbody_.Get(index);
}
inline double CameraModel::camerapositioninbody(int index) const {
  // @@protoc_insertion_point(field_get:cielimMessage.CameraModel.cameraPositionInBody)
  return _internal_camerapositioninbody(index);
}
inline void CameraModel::set_camerapositioninbody(int index, double value) {
  camerapositioninbody_.Set(index, value);
  // @@protoc_insertion_point(field_set:cielimMessage.CameraModel.cameraPositionInBody)
}
inline void CameraModel::_internal_add_camerapositioninbody(double value) {
  camerapositioninbody_.Add(value);
}
inline void CameraModel::add_camerapositioninbody(double value) {
  _internal_add_camerapositioninbody(value);
  // @@protoc_insertion_point(field_add:cielimMessage.CameraModel.cameraPositionInBody)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraModel::_internal_camerapositioninbody() const {
  return camerapositioninbody_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraModel::camerapositioninbody() const {
  // @@protoc_insertion_point(field_list:cielimMessage.CameraModel.cameraPositionInBody)
  return _internal_camerapositioninbody();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraModel::_internal_mutable_camerapositioninbody() {
  return &camerapositioninbody_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraModel::mutable_camerapositioninbody() {
  // @@protoc_insertion_point(field_mutable_list:cielimMessage.CameraModel.cameraPositionInBody)
  return _internal_mutable_camerapositioninbody();
}

// repeated double bodyFrameToCameraMrp = 6;
inline int CameraModel::_internal_bodyframetocameramrp_size() const {
  return bodyframetocameramrp_.size();
}
inline int CameraModel::bodyframetocameramrp_size() const {
  return _internal_bodyframetocameramrp_size();
}
inline void CameraModel::clear_bodyframetocameramrp() {
  bodyframetocameramrp_.Clear();
}
inline double CameraModel::_internal_bodyframetocameramrp(int index) const {
  return bodyframetocameramrp_.Get(index);
}
inline double CameraModel::bodyframetocameramrp(int index) const {
  // @@protoc_insertion_point(field_get:cielimMessage.CameraModel.bodyFrameToCameraMrp)
  return _internal_bodyframetocameramrp(index);
}
inline void CameraModel::set_bodyframetocameramrp(int index, double value) {
  bodyframetocameramrp_.Set(index, value);
  // @@protoc_insertion_point(field_set:cielimMessage.CameraModel.bodyFrameToCameraMrp)
}
inline void CameraModel::_internal_add_bodyframetocameramrp(double value) {
  bodyframetocameramrp_.Add(value);
}
inline void CameraModel::add_bodyframetocameramrp(double value) {
  _internal_add_bodyframetocameramrp(value);
  // @@protoc_insertion_point(field_add:cielimMessage.CameraModel.bodyFrameToCameraMrp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraModel::_internal_bodyframetocameramrp() const {
  return bodyframetocameramrp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraModel::bodyframetocameramrp() const {
  // @@protoc_insertion_point(field_list:cielimMessage.CameraModel.bodyFrameToCameraMrp)
  return _internal_bodyframetocameramrp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraModel::_internal_mutable_bodyframetocameramrp() {
  return &bodyframetocameramrp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraModel::mutable_bodyframetocameramrp() {
  // @@protoc_insertion_point(field_mutable_list:cielimMessage.CameraModel.bodyFrameToCameraMrp)
  return _internal_mutable_bodyframetocameramrp();
}

// uint64 renderRate = 7;
inline void CameraModel::clear_renderrate() {
  renderrate_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraModel::_internal_renderrate() const {
  return renderrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraModel::renderrate() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CameraModel.renderRate)
  return _internal_renderrate();
}
inline void CameraModel::_internal_set_renderrate(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  renderrate_ = value;
}
inline void CameraModel::set_renderrate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_renderrate(value);
  // @@protoc_insertion_point(field_set:cielimMessage.CameraModel.renderRate)
}

// double focalLength = 8;
inline void CameraModel::clear_focallength() {
  focallength_ = 0;
}
inline double CameraModel::_internal_focallength() const {
  return focallength_;
}
inline double CameraModel::focallength() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CameraModel.focalLength)
  return _internal_focallength();
}
inline void CameraModel::_internal_set_focallength(double value) {

  focallength_ = value;
}
inline void CameraModel::set_focallength(double value) {
  _internal_set_focallength(value);
  // @@protoc_insertion_point(field_set:cielimMessage.CameraModel.focalLength)
}

// double exposureTime = 9;
inline void CameraModel::clear_exposuretime() {
  exposuretime_ = 0;
}
inline double CameraModel::_internal_exposuretime() const {
  return exposuretime_;
}
inline double CameraModel::exposuretime() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CameraModel.exposureTime)
  return _internal_exposuretime();
}
inline void CameraModel::_internal_set_exposuretime(double value) {

  exposuretime_ = value;
}
inline void CameraModel::set_exposuretime(double value) {
  _internal_set_exposuretime(value);
  // @@protoc_insertion_point(field_set:cielimMessage.CameraModel.exposureTime)
}

// uint64 pointSpreadFunction = 10;
inline void CameraModel::clear_pointspreadfunction() {
  pointspreadfunction_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraModel::_internal_pointspreadfunction() const {
  return pointspreadfunction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraModel::pointspreadfunction() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CameraModel.pointSpreadFunction)
  return _internal_pointspreadfunction();
}
inline void CameraModel::_internal_set_pointspreadfunction(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  pointspreadfunction_ = value;
}
inline void CameraModel::set_pointspreadfunction(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pointspreadfunction(value);
  // @@protoc_insertion_point(field_set:cielimMessage.CameraModel.pointSpreadFunction)
}

// double readNoise = 11;
inline void CameraModel::clear_readnoise() {
  readnoise_ = 0;
}
inline double CameraModel::_internal_readnoise() const {
  return readnoise_;
}
inline double CameraModel::readnoise() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CameraModel.readNoise)
  return _internal_readnoise();
}
inline void CameraModel::_internal_set_readnoise(double value) {

  readnoise_ = value;
}
inline void CameraModel::set_readnoise(double value) {
  _internal_set_readnoise(value);
  // @@protoc_insertion_point(field_set:cielimMessage.CameraModel.readNoise)
}

// double systemGain = 12;
inline void CameraModel::clear_systemgain() {
  systemgain_ = 0;
}
inline double CameraModel::_internal_systemgain() const {
  return systemgain_;
}
inline double CameraModel::systemgain() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CameraModel.systemGain)
  return _internal_systemgain();
}
inline void CameraModel::_internal_set_systemgain(double value) {

  systemgain_ = value;
}
inline void CameraModel::set_systemgain(double value) {
  _internal_set_systemgain(value);
  // @@protoc_insertion_point(field_set:cielimMessage.CameraModel.systemGain)
}

// .cielimMessage.RenderingModel renderParameters = 13;
inline bool CameraModel::_internal_has_renderparameters() const {
  return this != internal_default_instance() && renderparameters_ != nullptr;
}
inline bool CameraModel::has_renderparameters() const {
  return _internal_has_renderparameters();
}
inline void CameraModel::clear_renderparameters() {
  if (GetArenaForAllocation() == nullptr && renderparameters_ != nullptr) {
    delete renderparameters_;
  }
  renderparameters_ = nullptr;
}
inline const ::cielimMessage::RenderingModel& CameraModel::_internal_renderparameters() const {
  const ::cielimMessage::RenderingModel* p = renderparameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::cielimMessage::RenderingModel&>(
      ::cielimMessage::_RenderingModel_default_instance_);
}
inline const ::cielimMessage::RenderingModel& CameraModel::renderparameters() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CameraModel.renderParameters)
  return _internal_renderparameters();
}
inline void CameraModel::unsafe_arena_set_allocated_renderparameters(
    ::cielimMessage::RenderingModel* renderparameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderparameters_);
  }
  renderparameters_ = renderparameters;
  if (renderparameters) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cielimMessage.CameraModel.renderParameters)
}
inline ::cielimMessage::RenderingModel* CameraModel::release_renderparameters() {

  ::cielimMessage::RenderingModel* temp = renderparameters_;
  renderparameters_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cielimMessage::RenderingModel* CameraModel::unsafe_arena_release_renderparameters() {
  // @@protoc_insertion_point(field_release:cielimMessage.CameraModel.renderParameters)

  ::cielimMessage::RenderingModel* temp = renderparameters_;
  renderparameters_ = nullptr;
  return temp;
}
inline ::cielimMessage::RenderingModel* CameraModel::_internal_mutable_renderparameters() {

  if (renderparameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::cielimMessage::RenderingModel>(GetArenaForAllocation());
    renderparameters_ = p;
  }
  return renderparameters_;
}
inline ::cielimMessage::RenderingModel* CameraModel::mutable_renderparameters() {
  // @@protoc_insertion_point(field_mutable:cielimMessage.CameraModel.renderParameters)
  return _internal_mutable_renderparameters();
}
inline void CameraModel::set_allocated_renderparameters(::cielimMessage::RenderingModel* renderparameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete renderparameters_;
  }
  if (renderparameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cielimMessage::RenderingModel>::GetOwningArena(renderparameters);
    if (message_arena != submessage_arena) {
      renderparameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderparameters, submessage_arena);
    }

  } else {

  }
  renderparameters_ = renderparameters;
  // @@protoc_insertion_point(field_set_allocated:cielimMessage.CameraModel.renderParameters)
}

// -------------------------------------------------------------------

// CielimMessage

// .cielimMessage.EpochDateTime epoch = 1;
inline bool CielimMessage::_internal_has_epoch() const {
  return this != internal_default_instance() && epoch_ != nullptr;
}
inline bool CielimMessage::has_epoch() const {
  return _internal_has_epoch();
}
inline void CielimMessage::clear_epoch() {
  if (GetArenaForAllocation() == nullptr && epoch_ != nullptr) {
    delete epoch_;
  }
  epoch_ = nullptr;
}
inline const ::cielimMessage::EpochDateTime& CielimMessage::_internal_epoch() const {
  const ::cielimMessage::EpochDateTime* p = epoch_;
  return p != nullptr ? *p : reinterpret_cast<const ::cielimMessage::EpochDateTime&>(
      ::cielimMessage::_EpochDateTime_default_instance_);
}
inline const ::cielimMessage::EpochDateTime& CielimMessage::epoch() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CielimMessage.epoch)
  return _internal_epoch();
}
inline void CielimMessage::unsafe_arena_set_allocated_epoch(
    ::cielimMessage::EpochDateTime* epoch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_);
  }
  epoch_ = epoch;
  if (epoch) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cielimMessage.CielimMessage.epoch)
}
inline ::cielimMessage::EpochDateTime* CielimMessage::release_epoch() {

  ::cielimMessage::EpochDateTime* temp = epoch_;
  epoch_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cielimMessage::EpochDateTime* CielimMessage::unsafe_arena_release_epoch() {
  // @@protoc_insertion_point(field_release:cielimMessage.CielimMessage.epoch)

  ::cielimMessage::EpochDateTime* temp = epoch_;
  epoch_ = nullptr;
  return temp;
}
inline ::cielimMessage::EpochDateTime* CielimMessage::_internal_mutable_epoch() {

  if (epoch_ == nullptr) {
    auto* p = CreateMaybeMessage<::cielimMessage::EpochDateTime>(GetArenaForAllocation());
    epoch_ = p;
  }
  return epoch_;
}
inline ::cielimMessage::EpochDateTime* CielimMessage::mutable_epoch() {
  // @@protoc_insertion_point(field_mutable:cielimMessage.CielimMessage.epoch)
  return _internal_mutable_epoch();
}
inline void CielimMessage::set_allocated_epoch(::cielimMessage::EpochDateTime* epoch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete epoch_;
  }
  if (epoch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cielimMessage::EpochDateTime>::GetOwningArena(epoch);
    if (message_arena != submessage_arena) {
      epoch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch, submessage_arena);
    }

  } else {

  }
  epoch_ = epoch;
  // @@protoc_insertion_point(field_set_allocated:cielimMessage.CielimMessage.epoch)
}

// .cielimMessage.TimeStamp currentTime = 2;
inline bool CielimMessage::_internal_has_currenttime() const {
  return this != internal_default_instance() && currenttime_ != nullptr;
}
inline bool CielimMessage::has_currenttime() const {
  return _internal_has_currenttime();
}
inline void CielimMessage::clear_currenttime() {
  if (GetArenaForAllocation() == nullptr && currenttime_ != nullptr) {
    delete currenttime_;
  }
  currenttime_ = nullptr;
}
inline const ::cielimMessage::TimeStamp& CielimMessage::_internal_currenttime() const {
  const ::cielimMessage::TimeStamp* p = currenttime_;
  return p != nullptr ? *p : reinterpret_cast<const ::cielimMessage::TimeStamp&>(
      ::cielimMessage::_TimeStamp_default_instance_);
}
inline const ::cielimMessage::TimeStamp& CielimMessage::currenttime() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CielimMessage.currentTime)
  return _internal_currenttime();
}
inline void CielimMessage::unsafe_arena_set_allocated_currenttime(
    ::cielimMessage::TimeStamp* currenttime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currenttime_);
  }
  currenttime_ = currenttime;
  if (currenttime) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cielimMessage.CielimMessage.currentTime)
}
inline ::cielimMessage::TimeStamp* CielimMessage::release_currenttime() {

  ::cielimMessage::TimeStamp* temp = currenttime_;
  currenttime_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cielimMessage::TimeStamp* CielimMessage::unsafe_arena_release_currenttime() {
  // @@protoc_insertion_point(field_release:cielimMessage.CielimMessage.currentTime)

  ::cielimMessage::TimeStamp* temp = currenttime_;
  currenttime_ = nullptr;
  return temp;
}
inline ::cielimMessage::TimeStamp* CielimMessage::_internal_mutable_currenttime() {

  if (currenttime_ == nullptr) {
    auto* p = CreateMaybeMessage<::cielimMessage::TimeStamp>(GetArenaForAllocation());
    currenttime_ = p;
  }
  return currenttime_;
}
inline ::cielimMessage::TimeStamp* CielimMessage::mutable_currenttime() {
  // @@protoc_insertion_point(field_mutable:cielimMessage.CielimMessage.currentTime)
  return _internal_mutable_currenttime();
}
inline void CielimMessage::set_allocated_currenttime(::cielimMessage::TimeStamp* currenttime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete currenttime_;
  }
  if (currenttime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cielimMessage::TimeStamp>::GetOwningArena(currenttime);
    if (message_arena != submessage_arena) {
      currenttime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currenttime, submessage_arena);
    }

  } else {

  }
  currenttime_ = currenttime;
  // @@protoc_insertion_point(field_set_allocated:cielimMessage.CielimMessage.currentTime)
}

// repeated .cielimMessage.CelestialBody celestialBodies = 3;
inline int CielimMessage::_internal_celestialbodies_size() const {
  return celestialbodies_.size();
}
inline int CielimMessage::celestialbodies_size() const {
  return _internal_celestialbodies_size();
}
inline void CielimMessage::clear_celestialbodies() {
  celestialbodies_.Clear();
}
inline ::cielimMessage::CelestialBody* CielimMessage::mutable_celestialbodies(int index) {
  // @@protoc_insertion_point(field_mutable:cielimMessage.CielimMessage.celestialBodies)
  return celestialbodies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cielimMessage::CelestialBody >*
CielimMessage::mutable_celestialbodies() {
  // @@protoc_insertion_point(field_mutable_list:cielimMessage.CielimMessage.celestialBodies)
  return &celestialbodies_;
}
inline const ::cielimMessage::CelestialBody& CielimMessage::_internal_celestialbodies(int index) const {
  return celestialbodies_.Get(index);
}
inline const ::cielimMessage::CelestialBody& CielimMessage::celestialbodies(int index) const {
  // @@protoc_insertion_point(field_get:cielimMessage.CielimMessage.celestialBodies)
  return _internal_celestialbodies(index);
}
inline ::cielimMessage::CelestialBody* CielimMessage::_internal_add_celestialbodies() {
  return celestialbodies_.Add();
}
inline ::cielimMessage::CelestialBody* CielimMessage::add_celestialbodies() {
  // @@protoc_insertion_point(field_add:cielimMessage.CielimMessage.celestialBodies)
  return _internal_add_celestialbodies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cielimMessage::CelestialBody >&
CielimMessage::celestialbodies() const {
  // @@protoc_insertion_point(field_list:cielimMessage.CielimMessage.celestialBodies)
  return celestialbodies_;
}

// .cielimMessage.Spacecraft spacecraft = 4;
inline bool CielimMessage::_internal_has_spacecraft() const {
  return this != internal_default_instance() && spacecraft_ != nullptr;
}
inline bool CielimMessage::has_spacecraft() const {
  return _internal_has_spacecraft();
}
inline void CielimMessage::clear_spacecraft() {
  if (GetArenaForAllocation() == nullptr && spacecraft_ != nullptr) {
    delete spacecraft_;
  }
  spacecraft_ = nullptr;
}
inline const ::cielimMessage::Spacecraft& CielimMessage::_internal_spacecraft() const {
  const ::cielimMessage::Spacecraft* p = spacecraft_;
  return p != nullptr ? *p : reinterpret_cast<const ::cielimMessage::Spacecraft&>(
      ::cielimMessage::_Spacecraft_default_instance_);
}
inline const ::cielimMessage::Spacecraft& CielimMessage::spacecraft() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CielimMessage.spacecraft)
  return _internal_spacecraft();
}
inline void CielimMessage::unsafe_arena_set_allocated_spacecraft(
    ::cielimMessage::Spacecraft* spacecraft) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spacecraft_);
  }
  spacecraft_ = spacecraft;
  if (spacecraft) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cielimMessage.CielimMessage.spacecraft)
}
inline ::cielimMessage::Spacecraft* CielimMessage::release_spacecraft() {

  ::cielimMessage::Spacecraft* temp = spacecraft_;
  spacecraft_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cielimMessage::Spacecraft* CielimMessage::unsafe_arena_release_spacecraft() {
  // @@protoc_insertion_point(field_release:cielimMessage.CielimMessage.spacecraft)

  ::cielimMessage::Spacecraft* temp = spacecraft_;
  spacecraft_ = nullptr;
  return temp;
}
inline ::cielimMessage::Spacecraft* CielimMessage::_internal_mutable_spacecraft() {

  if (spacecraft_ == nullptr) {
    auto* p = CreateMaybeMessage<::cielimMessage::Spacecraft>(GetArenaForAllocation());
    spacecraft_ = p;
  }
  return spacecraft_;
}
inline ::cielimMessage::Spacecraft* CielimMessage::mutable_spacecraft() {
  // @@protoc_insertion_point(field_mutable:cielimMessage.CielimMessage.spacecraft)
  return _internal_mutable_spacecraft();
}
inline void CielimMessage::set_allocated_spacecraft(::cielimMessage::Spacecraft* spacecraft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spacecraft_;
  }
  if (spacecraft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cielimMessage::Spacecraft>::GetOwningArena(spacecraft);
    if (message_arena != submessage_arena) {
      spacecraft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spacecraft, submessage_arena);
    }

  } else {

  }
  spacecraft_ = spacecraft;
  // @@protoc_insertion_point(field_set_allocated:cielimMessage.CielimMessage.spacecraft)
}

// .cielimMessage.CameraModel camera = 5;
inline bool CielimMessage::_internal_has_camera() const {
  return this != internal_default_instance() && camera_ != nullptr;
}
inline bool CielimMessage::has_camera() const {
  return _internal_has_camera();
}
inline void CielimMessage::clear_camera() {
  if (GetArenaForAllocation() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
}
inline const ::cielimMessage::CameraModel& CielimMessage::_internal_camera() const {
  const ::cielimMessage::CameraModel* p = camera_;
  return p != nullptr ? *p : reinterpret_cast<const ::cielimMessage::CameraModel&>(
      ::cielimMessage::_CameraModel_default_instance_);
}
inline const ::cielimMessage::CameraModel& CielimMessage::camera() const {
  // @@protoc_insertion_point(field_get:cielimMessage.CielimMessage.camera)
  return _internal_camera();
}
inline void CielimMessage::unsafe_arena_set_allocated_camera(
    ::cielimMessage::CameraModel* camera) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  camera_ = camera;
  if (camera) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cielimMessage.CielimMessage.camera)
}
inline ::cielimMessage::CameraModel* CielimMessage::release_camera() {

  ::cielimMessage::CameraModel* temp = camera_;
  camera_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cielimMessage::CameraModel* CielimMessage::unsafe_arena_release_camera() {
  // @@protoc_insertion_point(field_release:cielimMessage.CielimMessage.camera)

  ::cielimMessage::CameraModel* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::cielimMessage::CameraModel* CielimMessage::_internal_mutable_camera() {

  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::cielimMessage::CameraModel>(GetArenaForAllocation());
    camera_ = p;
  }
  return camera_;
}
inline ::cielimMessage::CameraModel* CielimMessage::mutable_camera() {
  // @@protoc_insertion_point(field_mutable:cielimMessage.CielimMessage.camera)
  return _internal_mutable_camera();
}
inline void CielimMessage::set_allocated_camera(::cielimMessage::CameraModel* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete camera_;
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cielimMessage::CameraModel>::GetOwningArena(camera);
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }

  } else {

  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:cielimMessage.CielimMessage.camera)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cielimMessage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cielimMessage_2eproto
