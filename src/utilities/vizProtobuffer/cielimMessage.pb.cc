// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cielimMessage.proto

#include "cielimMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cielimMessage {
constexpr TimeStamp::TimeStamp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : framenumber_(int64_t{0})
  , simtimeelapsed_(0){}
struct TimeStampDefaultTypeInternal {
  constexpr TimeStampDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeStampDefaultTypeInternal() {}
  union {
    TimeStamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeStampDefaultTypeInternal _TimeStamp_default_instance_;
constexpr EpochDateTime::EpochDateTime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : year_(0)
  , month_(0)
  , day_(0)
  , hours_(0)
  , seconds_(0)
  , minutes_(0){}
struct EpochDateTimeDefaultTypeInternal {
  constexpr EpochDateTimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EpochDateTimeDefaultTypeInternal() {}
  union {
    EpochDateTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EpochDateTimeDefaultTypeInternal _EpochDateTime_default_instance_;
constexpr CelestialModel::CelestialModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reflectanceparameters_()
  , principalaxisdistortion_()
  , shapemodel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , brdfmodel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , perlinnoisestddeviation_(0)
  , proceduralrocks_(0)
  , meanradius_(0){}
struct CelestialModelDefaultTypeInternal {
  constexpr CelestialModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CelestialModelDefaultTypeInternal() {}
  union {
    CelestialModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CelestialModelDefaultTypeInternal _CelestialModel_default_instance_;
constexpr CelestialBody::CelestialBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , velocity_()
  , attitude_()
  , bodyname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , models_(nullptr)
  , centralbody_(false){}
struct CelestialBodyDefaultTypeInternal {
  constexpr CelestialBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CelestialBodyDefaultTypeInternal() {}
  union {
    CelestialBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CelestialBodyDefaultTypeInternal _CelestialBody_default_instance_;
constexpr Spacecraft::Spacecraft(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_()
  , velocity_()
  , attitude_()
  , spacecraftname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SpacecraftDefaultTypeInternal {
  constexpr SpacecraftDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpacecraftDefaultTypeInternal() {}
  union {
    Spacecraft _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpacecraftDefaultTypeInternal _Spacecraft_default_instance_;
constexpr RenderingModel::RenderingModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rendering_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cosmicraystddeviation_(0)
  , enablestraylight_(false)
  , starfield_(false)
  , enablesmear_(false){}
struct RenderingModelDefaultTypeInternal {
  constexpr RenderingModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RenderingModelDefaultTypeInternal() {}
  union {
    RenderingModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RenderingModelDefaultTypeInternal _RenderingModel_default_instance_;
constexpr CameraModel::CameraModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fieldofview_()
  , resolution_()
  , _resolution_cached_byte_size_()
  , camerapositioninbody_()
  , bodyframetocameramrp_()
  , parentname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , renderparameters_(nullptr)
  , cameraid_(int64_t{0})
  , renderrate_(uint64_t{0u})
  , focallength_(0)
  , exposuretime_(0)
  , pointspreadfunction_(uint64_t{0u})
  , readnoise_(0)
  , systemgain_(0){}
struct CameraModelDefaultTypeInternal {
  constexpr CameraModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraModelDefaultTypeInternal() {}
  union {
    CameraModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraModelDefaultTypeInternal _CameraModel_default_instance_;
constexpr CielimMessage::CielimMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : celestialbodies_()
  , epoch_(nullptr)
  , currenttime_(nullptr)
  , spacecraft_(nullptr)
  , camera_(nullptr){}
struct CielimMessageDefaultTypeInternal {
  constexpr CielimMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CielimMessageDefaultTypeInternal() {}
  union {
    CielimMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CielimMessageDefaultTypeInternal _CielimMessage_default_instance_;
}  // namespace cielimMessage
namespace cielimMessage {

// ===================================================================

class TimeStamp::_Internal {
 public:
};

TimeStamp::TimeStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cielimMessage.TimeStamp)
}
TimeStamp::TimeStamp(const TimeStamp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&framenumber_, &from.framenumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&simtimeelapsed_) -
    reinterpret_cast<char*>(&framenumber_)) + sizeof(simtimeelapsed_));
  // @@protoc_insertion_point(copy_constructor:cielimMessage.TimeStamp)
}

void TimeStamp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&framenumber_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&simtimeelapsed_) -
    reinterpret_cast<char*>(&framenumber_)) + sizeof(simtimeelapsed_));
}

TimeStamp::~TimeStamp() {
  // @@protoc_insertion_point(destructor:cielimMessage.TimeStamp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TimeStamp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeStamp::ArenaDtor(void* object) {
  TimeStamp* _this = reinterpret_cast< TimeStamp* >(object);
  (void)_this;
}
void TimeStamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeStamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:cielimMessage.TimeStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&framenumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simtimeelapsed_) -
      reinterpret_cast<char*>(&framenumber_)) + sizeof(simtimeelapsed_));
  _internal_metadata_.Clear<std::string>();
}

const char* TimeStamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 frameNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          framenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double simTimeElapsed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          simtimeelapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeStamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cielimMessage.TimeStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frameNumber = 1;
  if (this->framenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_framenumber(), target);
  }

  // double simTimeElapsed = 2;
  if (!(this->simtimeelapsed() <= 0 && this->simtimeelapsed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_simtimeelapsed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cielimMessage.TimeStamp)
  return target;
}

size_t TimeStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cielimMessage.TimeStamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 frameNumber = 1;
  if (this->framenumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_framenumber());
  }

  // double simTimeElapsed = 2;
  if (!(this->simtimeelapsed() <= 0 && this->simtimeelapsed() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeStamp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TimeStamp*>(
      &from));
}

void TimeStamp::MergeFrom(const TimeStamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cielimMessage.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.framenumber() != 0) {
    _internal_set_framenumber(from._internal_framenumber());
  }
  if (!(from.simtimeelapsed() <= 0 && from.simtimeelapsed() >= 0)) {
    _internal_set_simtimeelapsed(from._internal_simtimeelapsed());
  }
}

void TimeStamp::CopyFrom(const TimeStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cielimMessage.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStamp::IsInitialized() const {
  return true;
}

void TimeStamp::InternalSwap(TimeStamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeStamp, simtimeelapsed_)
      + sizeof(TimeStamp::simtimeelapsed_)
      - PROTOBUF_FIELD_OFFSET(TimeStamp, framenumber_)>(
          reinterpret_cast<char*>(&framenumber_),
          reinterpret_cast<char*>(&other->framenumber_));
}

std::string TimeStamp::GetTypeName() const {
  return "cielimMessage.TimeStamp";
}


// ===================================================================

class EpochDateTime::_Internal {
 public:
};

EpochDateTime::EpochDateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cielimMessage.EpochDateTime)
}
EpochDateTime::EpochDateTime(const EpochDateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&minutes_) -
    reinterpret_cast<char*>(&year_)) + sizeof(minutes_));
  // @@protoc_insertion_point(copy_constructor:cielimMessage.EpochDateTime)
}

void EpochDateTime::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&year_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minutes_) -
    reinterpret_cast<char*>(&year_)) + sizeof(minutes_));
}

EpochDateTime::~EpochDateTime() {
  // @@protoc_insertion_point(destructor:cielimMessage.EpochDateTime)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EpochDateTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EpochDateTime::ArenaDtor(void* object) {
  EpochDateTime* _this = reinterpret_cast< EpochDateTime* >(object);
  (void)_this;
}
void EpochDateTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EpochDateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EpochDateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:cielimMessage.EpochDateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minutes_) -
      reinterpret_cast<char*>(&year_)) + sizeof(minutes_));
  _internal_metadata_.Clear<std::string>();
}

const char* EpochDateTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hours = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minutes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double seconds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EpochDateTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cielimMessage.EpochDateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_year(), target);
  }

  // int32 month = 2;
  if (this->month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_month(), target);
  }

  // int32 day = 3;
  if (this->day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_day(), target);
  }

  // int32 hours = 4;
  if (this->hours() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hours(), target);
  }

  // int32 minutes = 5;
  if (this->minutes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_minutes(), target);
  }

  // double seconds = 6;
  if (!(this->seconds() <= 0 && this->seconds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cielimMessage.EpochDateTime)
  return target;
}

size_t EpochDateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cielimMessage.EpochDateTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  // int32 month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  // int32 day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());
  }

  // int32 hours = 4;
  if (this->hours() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hours());
  }

  // double seconds = 6;
  if (!(this->seconds() <= 0 && this->seconds() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 minutes = 5;
  if (this->minutes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minutes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpochDateTime::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EpochDateTime*>(
      &from));
}

void EpochDateTime::MergeFrom(const EpochDateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cielimMessage.EpochDateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from.month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from.day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from.hours() != 0) {
    _internal_set_hours(from._internal_hours());
  }
  if (!(from.seconds() <= 0 && from.seconds() >= 0)) {
    _internal_set_seconds(from._internal_seconds());
  }
  if (from.minutes() != 0) {
    _internal_set_minutes(from._internal_minutes());
  }
}

void EpochDateTime::CopyFrom(const EpochDateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cielimMessage.EpochDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochDateTime::IsInitialized() const {
  return true;
}

void EpochDateTime::InternalSwap(EpochDateTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EpochDateTime, minutes_)
      + sizeof(EpochDateTime::minutes_)
      - PROTOBUF_FIELD_OFFSET(EpochDateTime, year_)>(
          reinterpret_cast<char*>(&year_),
          reinterpret_cast<char*>(&other->year_));
}

std::string EpochDateTime::GetTypeName() const {
  return "cielimMessage.EpochDateTime";
}


// ===================================================================

class CelestialModel::_Internal {
 public:
};

CelestialModel::CelestialModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  reflectanceparameters_(arena),
  principalaxisdistortion_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cielimMessage.CelestialModel)
}
CelestialModel::CelestialModel(const CelestialModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      reflectanceparameters_(from.reflectanceparameters_),
      principalaxisdistortion_(from.principalaxisdistortion_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  shapemodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shapemodel().empty()) {
    shapemodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shapemodel(),
      GetArenaForAllocation());
  }
  brdfmodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brdfmodel().empty()) {
    brdfmodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_brdfmodel(),
      GetArenaForAllocation());
  }
  ::memcpy(&perlinnoisestddeviation_, &from.perlinnoisestddeviation_,
    static_cast<size_t>(reinterpret_cast<char*>(&meanradius_) -
    reinterpret_cast<char*>(&perlinnoisestddeviation_)) + sizeof(meanradius_));
  // @@protoc_insertion_point(copy_constructor:cielimMessage.CelestialModel)
}

void CelestialModel::SharedCtor() {
shapemodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
brdfmodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&perlinnoisestddeviation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&meanradius_) -
    reinterpret_cast<char*>(&perlinnoisestddeviation_)) + sizeof(meanradius_));
}

CelestialModel::~CelestialModel() {
  // @@protoc_insertion_point(destructor:cielimMessage.CelestialModel)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CelestialModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  shapemodel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brdfmodel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CelestialModel::ArenaDtor(void* object) {
  CelestialModel* _this = reinterpret_cast< CelestialModel* >(object);
  (void)_this;
}
void CelestialModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CelestialModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CelestialModel::Clear() {
// @@protoc_insertion_point(message_clear_start:cielimMessage.CelestialModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reflectanceparameters_.Clear();
  principalaxisdistortion_.Clear();
  shapemodel_.ClearToEmpty();
  brdfmodel_.ClearToEmpty();
  ::memset(&perlinnoisestddeviation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meanradius_) -
      reinterpret_cast<char*>(&perlinnoisestddeviation_)) + sizeof(meanradius_));
  _internal_metadata_.Clear<std::string>();
}

const char* CelestialModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string shapeModel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_shapemodel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double perlinNoiseStdDeviation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          perlinnoisestddeviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double proceduralRocks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          proceduralrocks_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string brdfModel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_brdfmodel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double reflectanceParameters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_reflectanceparameters(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_reflectanceparameters(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double meanRadius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          meanradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double principalAxisDistortion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_principalaxisdistortion(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_principalaxisdistortion(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CelestialModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cielimMessage.CelestialModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string shapeModel = 1;
  if (!this->shapemodel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shapemodel().data(), static_cast<int>(this->_internal_shapemodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cielimMessage.CelestialModel.shapeModel");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_shapemodel(), target);
  }

  // double perlinNoiseStdDeviation = 2;
  if (!(this->perlinnoisestddeviation() <= 0 && this->perlinnoisestddeviation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_perlinnoisestddeviation(), target);
  }

  // double proceduralRocks = 3;
  if (!(this->proceduralrocks() <= 0 && this->proceduralrocks() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_proceduralrocks(), target);
  }

  // string brdfModel = 4;
  if (!this->brdfmodel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brdfmodel().data(), static_cast<int>(this->_internal_brdfmodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cielimMessage.CelestialModel.brdfModel");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_brdfmodel(), target);
  }

  // repeated double reflectanceParameters = 5;
  if (this->_internal_reflectanceparameters_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_reflectanceparameters(), target);
  }

  // double meanRadius = 6;
  if (!(this->meanradius() <= 0 && this->meanradius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_meanradius(), target);
  }

  // repeated double principalAxisDistortion = 7;
  if (this->_internal_principalaxisdistortion_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_principalaxisdistortion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cielimMessage.CelestialModel)
  return target;
}

size_t CelestialModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cielimMessage.CelestialModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double reflectanceParameters = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_reflectanceparameters_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double principalAxisDistortion = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_principalaxisdistortion_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // string shapeModel = 1;
  if (!this->shapemodel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shapemodel());
  }

  // string brdfModel = 4;
  if (!this->brdfmodel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brdfmodel());
  }

  // double perlinNoiseStdDeviation = 2;
  if (!(this->perlinnoisestddeviation() <= 0 && this->perlinnoisestddeviation() >= 0)) {
    total_size += 1 + 8;
  }

  // double proceduralRocks = 3;
  if (!(this->proceduralrocks() <= 0 && this->proceduralrocks() >= 0)) {
    total_size += 1 + 8;
  }

  // double meanRadius = 6;
  if (!(this->meanradius() <= 0 && this->meanradius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CelestialModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CelestialModel*>(
      &from));
}

void CelestialModel::MergeFrom(const CelestialModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cielimMessage.CelestialModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reflectanceparameters_.MergeFrom(from.reflectanceparameters_);
  principalaxisdistortion_.MergeFrom(from.principalaxisdistortion_);
  if (!from.shapemodel().empty()) {
    _internal_set_shapemodel(from._internal_shapemodel());
  }
  if (!from.brdfmodel().empty()) {
    _internal_set_brdfmodel(from._internal_brdfmodel());
  }
  if (!(from.perlinnoisestddeviation() <= 0 && from.perlinnoisestddeviation() >= 0)) {
    _internal_set_perlinnoisestddeviation(from._internal_perlinnoisestddeviation());
  }
  if (!(from.proceduralrocks() <= 0 && from.proceduralrocks() >= 0)) {
    _internal_set_proceduralrocks(from._internal_proceduralrocks());
  }
  if (!(from.meanradius() <= 0 && from.meanradius() >= 0)) {
    _internal_set_meanradius(from._internal_meanradius());
  }
}

void CelestialModel::CopyFrom(const CelestialModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cielimMessage.CelestialModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CelestialModel::IsInitialized() const {
  return true;
}

void CelestialModel::InternalSwap(CelestialModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reflectanceparameters_.InternalSwap(&other->reflectanceparameters_);
  principalaxisdistortion_.InternalSwap(&other->principalaxisdistortion_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shapemodel_, GetArenaForAllocation(),
      &other->shapemodel_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &brdfmodel_, GetArenaForAllocation(),
      &other->brdfmodel_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CelestialModel, meanradius_)
      + sizeof(CelestialModel::meanradius_)
      - PROTOBUF_FIELD_OFFSET(CelestialModel, perlinnoisestddeviation_)>(
          reinterpret_cast<char*>(&perlinnoisestddeviation_),
          reinterpret_cast<char*>(&other->perlinnoisestddeviation_));
}

std::string CelestialModel::GetTypeName() const {
  return "cielimMessage.CelestialModel";
}


// ===================================================================

class CelestialBody::_Internal {
 public:
  static const ::cielimMessage::CelestialModel& models(const CelestialBody* msg);
};

const ::cielimMessage::CelestialModel&
CelestialBody::_Internal::models(const CelestialBody* msg) {
  return *msg->models_;
}
CelestialBody::CelestialBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  position_(arena),
  velocity_(arena),
  attitude_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cielimMessage.CelestialBody)
}
CelestialBody::CelestialBody(const CelestialBody& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      position_(from.position_),
      velocity_(from.velocity_),
      attitude_(from.attitude_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bodyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bodyname().empty()) {
    bodyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bodyname(),
      GetArenaForAllocation());
  }
  if (from._internal_has_models()) {
    models_ = new ::cielimMessage::CelestialModel(*from.models_);
  } else {
    models_ = nullptr;
  }
  centralbody_ = from.centralbody_;
  // @@protoc_insertion_point(copy_constructor:cielimMessage.CelestialBody)
}

void CelestialBody::SharedCtor() {
bodyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&models_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&centralbody_) -
    reinterpret_cast<char*>(&models_)) + sizeof(centralbody_));
}

CelestialBody::~CelestialBody() {
  // @@protoc_insertion_point(destructor:cielimMessage.CelestialBody)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CelestialBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bodyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete models_;
}

void CelestialBody::ArenaDtor(void* object) {
  CelestialBody* _this = reinterpret_cast< CelestialBody* >(object);
  (void)_this;
}
void CelestialBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CelestialBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CelestialBody::Clear() {
// @@protoc_insertion_point(message_clear_start:cielimMessage.CelestialBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  velocity_.Clear();
  attitude_.Clear();
  bodyname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && models_ != nullptr) {
    delete models_;
  }
  models_ = nullptr;
  centralbody_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* CelestialBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bodyName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bodyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_velocity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_velocity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double attitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_attitude(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_attitude(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool centralBody = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          centralbody_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cielimMessage.CelestialModel models = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_models(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CelestialBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cielimMessage.CelestialBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bodyName = 1;
  if (!this->bodyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bodyname().data(), static_cast<int>(this->_internal_bodyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cielimMessage.CelestialBody.bodyName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bodyname(), target);
  }

  // repeated double position = 2;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // repeated double velocity = 3;
  if (this->_internal_velocity_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_velocity(), target);
  }

  // repeated double attitude = 4;
  if (this->_internal_attitude_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_attitude(), target);
  }

  // bool centralBody = 5;
  if (this->centralbody() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_centralbody(), target);
  }

  // .cielimMessage.CelestialModel models = 6;
  if (this->has_models()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::models(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cielimMessage.CelestialBody)
  return target;
}

size_t CelestialBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cielimMessage.CelestialBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double velocity = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_velocity_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double attitude = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_attitude_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // string bodyName = 1;
  if (!this->bodyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bodyname());
  }

  // .cielimMessage.CelestialModel models = 6;
  if (this->has_models()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *models_);
  }

  // bool centralBody = 5;
  if (this->centralbody() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CelestialBody::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CelestialBody*>(
      &from));
}

void CelestialBody::MergeFrom(const CelestialBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cielimMessage.CelestialBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  velocity_.MergeFrom(from.velocity_);
  attitude_.MergeFrom(from.attitude_);
  if (!from.bodyname().empty()) {
    _internal_set_bodyname(from._internal_bodyname());
  }
  if (from.has_models()) {
    _internal_mutable_models()->::cielimMessage::CelestialModel::MergeFrom(from._internal_models());
  }
  if (from.centralbody() != 0) {
    _internal_set_centralbody(from._internal_centralbody());
  }
}

void CelestialBody::CopyFrom(const CelestialBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cielimMessage.CelestialBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CelestialBody::IsInitialized() const {
  return true;
}

void CelestialBody::InternalSwap(CelestialBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  velocity_.InternalSwap(&other->velocity_);
  attitude_.InternalSwap(&other->attitude_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bodyname_, GetArenaForAllocation(),
      &other->bodyname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CelestialBody, centralbody_)
      + sizeof(CelestialBody::centralbody_)
      - PROTOBUF_FIELD_OFFSET(CelestialBody, models_)>(
          reinterpret_cast<char*>(&models_),
          reinterpret_cast<char*>(&other->models_));
}

std::string CelestialBody::GetTypeName() const {
  return "cielimMessage.CelestialBody";
}


// ===================================================================

class Spacecraft::_Internal {
 public:
};

Spacecraft::Spacecraft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  position_(arena),
  velocity_(arena),
  attitude_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cielimMessage.Spacecraft)
}
Spacecraft::Spacecraft(const Spacecraft& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      position_(from.position_),
      velocity_(from.velocity_),
      attitude_(from.attitude_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  spacecraftname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spacecraftname().empty()) {
    spacecraftname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spacecraftname(),
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cielimMessage.Spacecraft)
}

void Spacecraft::SharedCtor() {
spacecraftname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Spacecraft::~Spacecraft() {
  // @@protoc_insertion_point(destructor:cielimMessage.Spacecraft)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Spacecraft::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  spacecraftname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Spacecraft::ArenaDtor(void* object) {
  Spacecraft* _this = reinterpret_cast< Spacecraft* >(object);
  (void)_this;
}
void Spacecraft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Spacecraft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Spacecraft::Clear() {
// @@protoc_insertion_point(message_clear_start:cielimMessage.Spacecraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  velocity_.Clear();
  attitude_.Clear();
  spacecraftname_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* Spacecraft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string spacecraftName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_spacecraftname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_velocity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_velocity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double attitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_attitude(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_attitude(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Spacecraft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cielimMessage.Spacecraft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spacecraftName = 1;
  if (!this->spacecraftname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spacecraftname().data(), static_cast<int>(this->_internal_spacecraftname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cielimMessage.Spacecraft.spacecraftName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spacecraftname(), target);
  }

  // repeated double position = 2;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // repeated double velocity = 3;
  if (this->_internal_velocity_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_velocity(), target);
  }

  // repeated double attitude = 4;
  if (this->_internal_attitude_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_attitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cielimMessage.Spacecraft)
  return target;
}

size_t Spacecraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cielimMessage.Spacecraft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double velocity = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_velocity_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double attitude = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_attitude_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // string spacecraftName = 1;
  if (!this->spacecraftname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spacecraftname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Spacecraft::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Spacecraft*>(
      &from));
}

void Spacecraft::MergeFrom(const Spacecraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cielimMessage.Spacecraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  velocity_.MergeFrom(from.velocity_);
  attitude_.MergeFrom(from.attitude_);
  if (!from.spacecraftname().empty()) {
    _internal_set_spacecraftname(from._internal_spacecraftname());
  }
}

void Spacecraft::CopyFrom(const Spacecraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cielimMessage.Spacecraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spacecraft::IsInitialized() const {
  return true;
}

void Spacecraft::InternalSwap(Spacecraft* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  velocity_.InternalSwap(&other->velocity_);
  attitude_.InternalSwap(&other->attitude_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &spacecraftname_, GetArenaForAllocation(),
      &other->spacecraftname_, other->GetArenaForAllocation()
  );
}

std::string Spacecraft::GetTypeName() const {
  return "cielimMessage.Spacecraft";
}


// ===================================================================

class RenderingModel::_Internal {
 public:
};

RenderingModel::RenderingModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cielimMessage.RenderingModel)
}
RenderingModel::RenderingModel(const RenderingModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  rendering_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rendering().empty()) {
    rendering_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rendering(),
      GetArenaForAllocation());
  }
  ::memcpy(&cosmicraystddeviation_, &from.cosmicraystddeviation_,
    static_cast<size_t>(reinterpret_cast<char*>(&enablesmear_) -
    reinterpret_cast<char*>(&cosmicraystddeviation_)) + sizeof(enablesmear_));
  // @@protoc_insertion_point(copy_constructor:cielimMessage.RenderingModel)
}

void RenderingModel::SharedCtor() {
rendering_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cosmicraystddeviation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enablesmear_) -
    reinterpret_cast<char*>(&cosmicraystddeviation_)) + sizeof(enablesmear_));
}

RenderingModel::~RenderingModel() {
  // @@protoc_insertion_point(destructor:cielimMessage.RenderingModel)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RenderingModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rendering_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RenderingModel::ArenaDtor(void* object) {
  RenderingModel* _this = reinterpret_cast< RenderingModel* >(object);
  (void)_this;
}
void RenderingModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenderingModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RenderingModel::Clear() {
// @@protoc_insertion_point(message_clear_start:cielimMessage.RenderingModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rendering_.ClearToEmpty();
  ::memset(&cosmicraystddeviation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enablesmear_) -
      reinterpret_cast<char*>(&cosmicraystddeviation_)) + sizeof(enablesmear_));
  _internal_metadata_.Clear<std::string>();
}

const char* RenderingModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double cosmicRayStdDeviation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          cosmicraystddeviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool enableStrayLight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enablestraylight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool starField = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          starfield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rendering = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_rendering();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enableSmear = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enablesmear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenderingModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cielimMessage.RenderingModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double cosmicRayStdDeviation = 1;
  if (!(this->cosmicraystddeviation() <= 0 && this->cosmicraystddeviation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_cosmicraystddeviation(), target);
  }

  // bool enableStrayLight = 2;
  if (this->enablestraylight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enablestraylight(), target);
  }

  // bool starField = 3;
  if (this->starfield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_starfield(), target);
  }

  // string rendering = 4;
  if (!this->rendering().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rendering().data(), static_cast<int>(this->_internal_rendering().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cielimMessage.RenderingModel.rendering");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rendering(), target);
  }

  // bool enableSmear = 5;
  if (this->enablesmear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enablesmear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cielimMessage.RenderingModel)
  return target;
}

size_t RenderingModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cielimMessage.RenderingModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rendering = 4;
  if (!this->rendering().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rendering());
  }

  // double cosmicRayStdDeviation = 1;
  if (!(this->cosmicraystddeviation() <= 0 && this->cosmicraystddeviation() >= 0)) {
    total_size += 1 + 8;
  }

  // bool enableStrayLight = 2;
  if (this->enablestraylight() != 0) {
    total_size += 1 + 1;
  }

  // bool starField = 3;
  if (this->starfield() != 0) {
    total_size += 1 + 1;
  }

  // bool enableSmear = 5;
  if (this->enablesmear() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenderingModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RenderingModel*>(
      &from));
}

void RenderingModel::MergeFrom(const RenderingModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cielimMessage.RenderingModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.rendering().empty()) {
    _internal_set_rendering(from._internal_rendering());
  }
  if (!(from.cosmicraystddeviation() <= 0 && from.cosmicraystddeviation() >= 0)) {
    _internal_set_cosmicraystddeviation(from._internal_cosmicraystddeviation());
  }
  if (from.enablestraylight() != 0) {
    _internal_set_enablestraylight(from._internal_enablestraylight());
  }
  if (from.starfield() != 0) {
    _internal_set_starfield(from._internal_starfield());
  }
  if (from.enablesmear() != 0) {
    _internal_set_enablesmear(from._internal_enablesmear());
  }
}

void RenderingModel::CopyFrom(const RenderingModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cielimMessage.RenderingModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderingModel::IsInitialized() const {
  return true;
}

void RenderingModel::InternalSwap(RenderingModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rendering_, GetArenaForAllocation(),
      &other->rendering_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenderingModel, enablesmear_)
      + sizeof(RenderingModel::enablesmear_)
      - PROTOBUF_FIELD_OFFSET(RenderingModel, cosmicraystddeviation_)>(
          reinterpret_cast<char*>(&cosmicraystddeviation_),
          reinterpret_cast<char*>(&other->cosmicraystddeviation_));
}

std::string RenderingModel::GetTypeName() const {
  return "cielimMessage.RenderingModel";
}


// ===================================================================

class CameraModel::_Internal {
 public:
  static const ::cielimMessage::RenderingModel& renderparameters(const CameraModel* msg);
};

const ::cielimMessage::RenderingModel&
CameraModel::_Internal::renderparameters(const CameraModel* msg) {
  return *msg->renderparameters_;
}
CameraModel::CameraModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  fieldofview_(arena),
  resolution_(arena),
  camerapositioninbody_(arena),
  bodyframetocameramrp_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cielimMessage.CameraModel)
}
CameraModel::CameraModel(const CameraModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      fieldofview_(from.fieldofview_),
      resolution_(from.resolution_),
      camerapositioninbody_(from.camerapositioninbody_),
      bodyframetocameramrp_(from.bodyframetocameramrp_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  parentname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parentname().empty()) {
    parentname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parentname(),
      GetArenaForAllocation());
  }
  if (from._internal_has_renderparameters()) {
    renderparameters_ = new ::cielimMessage::RenderingModel(*from.renderparameters_);
  } else {
    renderparameters_ = nullptr;
  }
  ::memcpy(&cameraid_, &from.cameraid_,
    static_cast<size_t>(reinterpret_cast<char*>(&systemgain_) -
    reinterpret_cast<char*>(&cameraid_)) + sizeof(systemgain_));
  // @@protoc_insertion_point(copy_constructor:cielimMessage.CameraModel)
}

void CameraModel::SharedCtor() {
parentname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&renderparameters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&systemgain_) -
    reinterpret_cast<char*>(&renderparameters_)) + sizeof(systemgain_));
}

CameraModel::~CameraModel() {
  // @@protoc_insertion_point(destructor:cielimMessage.CameraModel)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CameraModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parentname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete renderparameters_;
}

void CameraModel::ArenaDtor(void* object) {
  CameraModel* _this = reinterpret_cast< CameraModel* >(object);
  (void)_this;
}
void CameraModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraModel::Clear() {
// @@protoc_insertion_point(message_clear_start:cielimMessage.CameraModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldofview_.Clear();
  resolution_.Clear();
  camerapositioninbody_.Clear();
  bodyframetocameramrp_.Clear();
  parentname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && renderparameters_ != nullptr) {
    delete renderparameters_;
  }
  renderparameters_ = nullptr;
  ::memset(&cameraid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&systemgain_) -
      reinterpret_cast<char*>(&cameraid_)) + sizeof(systemgain_));
  _internal_metadata_.Clear<std::string>();
}

const char* CameraModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 cameraId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cameraid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string parentName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_parentname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double fieldOfView = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_fieldofview(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_fieldofview(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int64 resolution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_resolution(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_resolution(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double cameraPositionInBody = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_camerapositioninbody(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_camerapositioninbody(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double bodyFrameToCameraMrp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bodyframetocameramrp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_bodyframetocameramrp(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 renderRate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          renderrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double focalLength = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          focallength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double exposureTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          exposuretime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 pointSpreadFunction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          pointspreadfunction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double readNoise = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          readnoise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double systemGain = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          systemgain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .cielimMessage.RenderingModel renderParameters = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_renderparameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cielimMessage.CameraModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cameraId = 1;
  if (this->cameraid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_cameraid(), target);
  }

  // string parentName = 2;
  if (!this->parentname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parentname().data(), static_cast<int>(this->_internal_parentname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cielimMessage.CameraModel.parentName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_parentname(), target);
  }

  // repeated double fieldOfView = 3;
  if (this->_internal_fieldofview_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_fieldofview(), target);
  }

  // repeated int64 resolution = 4;
  {
    int byte_size = _resolution_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_resolution(), byte_size, target);
    }
  }

  // repeated double cameraPositionInBody = 5;
  if (this->_internal_camerapositioninbody_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_camerapositioninbody(), target);
  }

  // repeated double bodyFrameToCameraMrp = 6;
  if (this->_internal_bodyframetocameramrp_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_bodyframetocameramrp(), target);
  }

  // uint64 renderRate = 7;
  if (this->renderrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_renderrate(), target);
  }

  // double focalLength = 8;
  if (!(this->focallength() <= 0 && this->focallength() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_focallength(), target);
  }

  // double exposureTime = 9;
  if (!(this->exposuretime() <= 0 && this->exposuretime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_exposuretime(), target);
  }

  // uint64 pointSpreadFunction = 10;
  if (this->pointspreadfunction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_pointspreadfunction(), target);
  }

  // double readNoise = 11;
  if (!(this->readnoise() <= 0 && this->readnoise() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_readnoise(), target);
  }

  // double systemGain = 12;
  if (!(this->systemgain() <= 0 && this->systemgain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_systemgain(), target);
  }

  // .cielimMessage.RenderingModel renderParameters = 13;
  if (this->has_renderparameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::renderparameters(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cielimMessage.CameraModel)
  return target;
}

size_t CameraModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cielimMessage.CameraModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double fieldOfView = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fieldofview_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int64 resolution = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->resolution_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _resolution_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double cameraPositionInBody = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_camerapositioninbody_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double bodyFrameToCameraMrp = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bodyframetocameramrp_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // string parentName = 2;
  if (!this->parentname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parentname());
  }

  // .cielimMessage.RenderingModel renderParameters = 13;
  if (this->has_renderparameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *renderparameters_);
  }

  // int64 cameraId = 1;
  if (this->cameraid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cameraid());
  }

  // uint64 renderRate = 7;
  if (this->renderrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_renderrate());
  }

  // double focalLength = 8;
  if (!(this->focallength() <= 0 && this->focallength() >= 0)) {
    total_size += 1 + 8;
  }

  // double exposureTime = 9;
  if (!(this->exposuretime() <= 0 && this->exposuretime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 pointSpreadFunction = 10;
  if (this->pointspreadfunction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pointspreadfunction());
  }

  // double readNoise = 11;
  if (!(this->readnoise() <= 0 && this->readnoise() >= 0)) {
    total_size += 1 + 8;
  }

  // double systemGain = 12;
  if (!(this->systemgain() <= 0 && this->systemgain() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CameraModel*>(
      &from));
}

void CameraModel::MergeFrom(const CameraModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cielimMessage.CameraModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldofview_.MergeFrom(from.fieldofview_);
  resolution_.MergeFrom(from.resolution_);
  camerapositioninbody_.MergeFrom(from.camerapositioninbody_);
  bodyframetocameramrp_.MergeFrom(from.bodyframetocameramrp_);
  if (!from.parentname().empty()) {
    _internal_set_parentname(from._internal_parentname());
  }
  if (from.has_renderparameters()) {
    _internal_mutable_renderparameters()->::cielimMessage::RenderingModel::MergeFrom(from._internal_renderparameters());
  }
  if (from.cameraid() != 0) {
    _internal_set_cameraid(from._internal_cameraid());
  }
  if (from.renderrate() != 0) {
    _internal_set_renderrate(from._internal_renderrate());
  }
  if (!(from.focallength() <= 0 && from.focallength() >= 0)) {
    _internal_set_focallength(from._internal_focallength());
  }
  if (!(from.exposuretime() <= 0 && from.exposuretime() >= 0)) {
    _internal_set_exposuretime(from._internal_exposuretime());
  }
  if (from.pointspreadfunction() != 0) {
    _internal_set_pointspreadfunction(from._internal_pointspreadfunction());
  }
  if (!(from.readnoise() <= 0 && from.readnoise() >= 0)) {
    _internal_set_readnoise(from._internal_readnoise());
  }
  if (!(from.systemgain() <= 0 && from.systemgain() >= 0)) {
    _internal_set_systemgain(from._internal_systemgain());
  }
}

void CameraModel::CopyFrom(const CameraModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cielimMessage.CameraModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraModel::IsInitialized() const {
  return true;
}

void CameraModel::InternalSwap(CameraModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fieldofview_.InternalSwap(&other->fieldofview_);
  resolution_.InternalSwap(&other->resolution_);
  camerapositioninbody_.InternalSwap(&other->camerapositioninbody_);
  bodyframetocameramrp_.InternalSwap(&other->bodyframetocameramrp_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parentname_, GetArenaForAllocation(),
      &other->parentname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraModel, systemgain_)
      + sizeof(CameraModel::systemgain_)
      - PROTOBUF_FIELD_OFFSET(CameraModel, renderparameters_)>(
          reinterpret_cast<char*>(&renderparameters_),
          reinterpret_cast<char*>(&other->renderparameters_));
}

std::string CameraModel::GetTypeName() const {
  return "cielimMessage.CameraModel";
}


// ===================================================================

class CielimMessage::_Internal {
 public:
  static const ::cielimMessage::EpochDateTime& epoch(const CielimMessage* msg);
  static const ::cielimMessage::TimeStamp& currenttime(const CielimMessage* msg);
  static const ::cielimMessage::Spacecraft& spacecraft(const CielimMessage* msg);
  static const ::cielimMessage::CameraModel& camera(const CielimMessage* msg);
};

const ::cielimMessage::EpochDateTime&
CielimMessage::_Internal::epoch(const CielimMessage* msg) {
  return *msg->epoch_;
}
const ::cielimMessage::TimeStamp&
CielimMessage::_Internal::currenttime(const CielimMessage* msg) {
  return *msg->currenttime_;
}
const ::cielimMessage::Spacecraft&
CielimMessage::_Internal::spacecraft(const CielimMessage* msg) {
  return *msg->spacecraft_;
}
const ::cielimMessage::CameraModel&
CielimMessage::_Internal::camera(const CielimMessage* msg) {
  return *msg->camera_;
}
CielimMessage::CielimMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  celestialbodies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cielimMessage.CielimMessage)
}
CielimMessage::CielimMessage(const CielimMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      celestialbodies_(from.celestialbodies_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_epoch()) {
    epoch_ = new ::cielimMessage::EpochDateTime(*from.epoch_);
  } else {
    epoch_ = nullptr;
  }
  if (from._internal_has_currenttime()) {
    currenttime_ = new ::cielimMessage::TimeStamp(*from.currenttime_);
  } else {
    currenttime_ = nullptr;
  }
  if (from._internal_has_spacecraft()) {
    spacecraft_ = new ::cielimMessage::Spacecraft(*from.spacecraft_);
  } else {
    spacecraft_ = nullptr;
  }
  if (from._internal_has_camera()) {
    camera_ = new ::cielimMessage::CameraModel(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cielimMessage.CielimMessage)
}

void CielimMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&camera_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(camera_));
}

CielimMessage::~CielimMessage() {
  // @@protoc_insertion_point(destructor:cielimMessage.CielimMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CielimMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete epoch_;
  if (this != internal_default_instance()) delete currenttime_;
  if (this != internal_default_instance()) delete spacecraft_;
  if (this != internal_default_instance()) delete camera_;
}

void CielimMessage::ArenaDtor(void* object) {
  CielimMessage* _this = reinterpret_cast< CielimMessage* >(object);
  (void)_this;
}
void CielimMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CielimMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CielimMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:cielimMessage.CielimMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  celestialbodies_.Clear();
  if (GetArenaForAllocation() == nullptr && epoch_ != nullptr) {
    delete epoch_;
  }
  epoch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && currenttime_ != nullptr) {
    delete currenttime_;
  }
  currenttime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spacecraft_ != nullptr) {
    delete spacecraft_;
  }
  spacecraft_ = nullptr;
  if (GetArenaForAllocation() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* CielimMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cielimMessage.EpochDateTime epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cielimMessage.TimeStamp currentTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_currenttime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cielimMessage.CelestialBody celestialBodies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_celestialbodies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .cielimMessage.Spacecraft spacecraft = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_spacecraft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cielimMessage.CameraModel camera = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CielimMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cielimMessage.CielimMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cielimMessage.EpochDateTime epoch = 1;
  if (this->has_epoch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::epoch(this), target, stream);
  }

  // .cielimMessage.TimeStamp currentTime = 2;
  if (this->has_currenttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::currenttime(this), target, stream);
  }

  // repeated .cielimMessage.CelestialBody celestialBodies = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_celestialbodies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_celestialbodies(i), target, stream);
  }

  // .cielimMessage.Spacecraft spacecraft = 4;
  if (this->has_spacecraft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::spacecraft(this), target, stream);
  }

  // .cielimMessage.CameraModel camera = 5;
  if (this->has_camera()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::camera(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cielimMessage.CielimMessage)
  return target;
}

size_t CielimMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cielimMessage.CielimMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cielimMessage.CelestialBody celestialBodies = 3;
  total_size += 1UL * this->_internal_celestialbodies_size();
  for (const auto& msg : this->celestialbodies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cielimMessage.EpochDateTime epoch = 1;
  if (this->has_epoch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *epoch_);
  }

  // .cielimMessage.TimeStamp currentTime = 2;
  if (this->has_currenttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currenttime_);
  }

  // .cielimMessage.Spacecraft spacecraft = 4;
  if (this->has_spacecraft()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spacecraft_);
  }

  // .cielimMessage.CameraModel camera = 5;
  if (this->has_camera()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CielimMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CielimMessage*>(
      &from));
}

void CielimMessage::MergeFrom(const CielimMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cielimMessage.CielimMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  celestialbodies_.MergeFrom(from.celestialbodies_);
  if (from.has_epoch()) {
    _internal_mutable_epoch()->::cielimMessage::EpochDateTime::MergeFrom(from._internal_epoch());
  }
  if (from.has_currenttime()) {
    _internal_mutable_currenttime()->::cielimMessage::TimeStamp::MergeFrom(from._internal_currenttime());
  }
  if (from.has_spacecraft()) {
    _internal_mutable_spacecraft()->::cielimMessage::Spacecraft::MergeFrom(from._internal_spacecraft());
  }
  if (from.has_camera()) {
    _internal_mutable_camera()->::cielimMessage::CameraModel::MergeFrom(from._internal_camera());
  }
}

void CielimMessage::CopyFrom(const CielimMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cielimMessage.CielimMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CielimMessage::IsInitialized() const {
  return true;
}

void CielimMessage::InternalSwap(CielimMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  celestialbodies_.InternalSwap(&other->celestialbodies_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CielimMessage, camera_)
      + sizeof(CielimMessage::camera_)
      - PROTOBUF_FIELD_OFFSET(CielimMessage, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

std::string CielimMessage::GetTypeName() const {
  return "cielimMessage.CielimMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace cielimMessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cielimMessage::TimeStamp* Arena::CreateMaybeMessage< ::cielimMessage::TimeStamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cielimMessage::TimeStamp >(arena);
}
template<> PROTOBUF_NOINLINE ::cielimMessage::EpochDateTime* Arena::CreateMaybeMessage< ::cielimMessage::EpochDateTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cielimMessage::EpochDateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::cielimMessage::CelestialModel* Arena::CreateMaybeMessage< ::cielimMessage::CelestialModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cielimMessage::CelestialModel >(arena);
}
template<> PROTOBUF_NOINLINE ::cielimMessage::CelestialBody* Arena::CreateMaybeMessage< ::cielimMessage::CelestialBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cielimMessage::CelestialBody >(arena);
}
template<> PROTOBUF_NOINLINE ::cielimMessage::Spacecraft* Arena::CreateMaybeMessage< ::cielimMessage::Spacecraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cielimMessage::Spacecraft >(arena);
}
template<> PROTOBUF_NOINLINE ::cielimMessage::RenderingModel* Arena::CreateMaybeMessage< ::cielimMessage::RenderingModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cielimMessage::RenderingModel >(arena);
}
template<> PROTOBUF_NOINLINE ::cielimMessage::CameraModel* Arena::CreateMaybeMessage< ::cielimMessage::CameraModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cielimMessage::CameraModel >(arena);
}
template<> PROTOBUF_NOINLINE ::cielimMessage::CielimMessage* Arena::CreateMaybeMessage< ::cielimMessage::CielimMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cielimMessage::CielimMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
